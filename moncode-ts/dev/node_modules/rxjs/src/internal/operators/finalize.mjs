import { operate } from '../util/lift.mjs';
/**
 * Returns an Observable that mirrors the source Observable, but will call a specified function when
 * the source terminates on complete or error.
 * The specified function will also be called when the subscriber explicitly unsubscribes.
 *
 * ## Examples
 *
 * Execute callback function when the observable completes
 *
 * ```ts
 * import { interval, take, finalize } from 'rxjs';
 *
 * // emit value in sequence every 1 second
 * const source = interval(1000);
 * const example = source.pipe(
 *   take(5), //take only the first 5 values
 *   finalize(() => console.log('Sequence complete')) // Execute when the observable completes
 * );
 * const subscribe = example.subscribe(val => console.log(val));
 *
 * // results:
 * // 0
 * // 1
 * // 2
 * // 3
 * // 4
 * // 'Sequence complete'
 * ```
 *
 * Execute callback function when the subscriber explicitly unsubscribes
 *
 * ```ts
 * import { interval, finalize, tap, noop, timer } from 'rxjs';
 *
 * const source = interval(100).pipe(
 *   finalize(() => console.log('[finalize] Called')),
 *   tap({
 *     next: () => console.log('[next] Called'),
 *     error: () => console.log('[error] Not called'),
 *     complete: () => console.log('[tap complete] Not called')
 *   })
 * );
 *
 * const sub = source.subscribe({
 *   next: x => console.log(x),
 *   error: noop,
 *   complete: () => console.log('[complete] Not called')
 * });
 *
 * timer(150).subscribe(() => sub.unsubscribe());
 *
 * // results:
 * // '[next] Called'
 * // 0
 * // '[finalize] Called'
 * ```
 *
 * @param {function} callback Function to be called when source terminates.
 * @return A function that returns an Observable that mirrors the source, but
 * will call the specified function on termination.
 */
export function finalize(callback) {
    return operate((source, subscriber) => {
        // TODO: This try/finally was only added for `useDeprecatedSynchronousErrorHandling`.
        // REMOVE THIS WHEN THAT HOT GARBAGE IS REMOVED IN V8.
        try {
            source.subscribe(subscriber);
        }
        finally {
            subscriber.add(callback);
        }
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvZmluYWxpemUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV2Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNERHO0FBQ0gsTUFBTSxVQUFVLFFBQVEsQ0FBSSxRQUFvQjtJQUM5QyxPQUFPLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRTtRQUNwQyxxRkFBcUY7UUFDckYsc0RBQXNEO1FBQ3RELElBQUksQ0FBQztZQUNILE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDL0IsQ0FBQztnQkFBUyxDQUFDO1lBQ1QsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQixDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvZmluYWxpemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb24gfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcblxuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBtaXJyb3JzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSwgYnV0IHdpbGwgY2FsbCBhIHNwZWNpZmllZCBmdW5jdGlvbiB3aGVuXG4gKiB0aGUgc291cmNlIHRlcm1pbmF0ZXMgb24gY29tcGxldGUgb3IgZXJyb3IuXG4gKiBUaGUgc3BlY2lmaWVkIGZ1bmN0aW9uIHdpbGwgYWxzbyBiZSBjYWxsZWQgd2hlbiB0aGUgc3Vic2NyaWJlciBleHBsaWNpdGx5IHVuc3Vic2NyaWJlcy5cbiAqXG4gKiAjIyBFeGFtcGxlc1xuICpcbiAqIEV4ZWN1dGUgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiB0aGUgb2JzZXJ2YWJsZSBjb21wbGV0ZXNcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgaW50ZXJ2YWwsIHRha2UsIGZpbmFsaXplIH0gZnJvbSAncnhqcyc7XG4gKlxuICogLy8gZW1pdCB2YWx1ZSBpbiBzZXF1ZW5jZSBldmVyeSAxIHNlY29uZFxuICogY29uc3Qgc291cmNlID0gaW50ZXJ2YWwoMTAwMCk7XG4gKiBjb25zdCBleGFtcGxlID0gc291cmNlLnBpcGUoXG4gKiAgIHRha2UoNSksIC8vdGFrZSBvbmx5IHRoZSBmaXJzdCA1IHZhbHVlc1xuICogICBmaW5hbGl6ZSgoKSA9PiBjb25zb2xlLmxvZygnU2VxdWVuY2UgY29tcGxldGUnKSkgLy8gRXhlY3V0ZSB3aGVuIHRoZSBvYnNlcnZhYmxlIGNvbXBsZXRlc1xuICogKTtcbiAqIGNvbnN0IHN1YnNjcmliZSA9IGV4YW1wbGUuc3Vic2NyaWJlKHZhbCA9PiBjb25zb2xlLmxvZyh2YWwpKTtcbiAqXG4gKiAvLyByZXN1bHRzOlxuICogLy8gMFxuICogLy8gMVxuICogLy8gMlxuICogLy8gM1xuICogLy8gNFxuICogLy8gJ1NlcXVlbmNlIGNvbXBsZXRlJ1xuICogYGBgXG4gKlxuICogRXhlY3V0ZSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIHRoZSBzdWJzY3JpYmVyIGV4cGxpY2l0bHkgdW5zdWJzY3JpYmVzXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGludGVydmFsLCBmaW5hbGl6ZSwgdGFwLCBub29wLCB0aW1lciB9IGZyb20gJ3J4anMnO1xuICpcbiAqIGNvbnN0IHNvdXJjZSA9IGludGVydmFsKDEwMCkucGlwZShcbiAqICAgZmluYWxpemUoKCkgPT4gY29uc29sZS5sb2coJ1tmaW5hbGl6ZV0gQ2FsbGVkJykpLFxuICogICB0YXAoe1xuICogICAgIG5leHQ6ICgpID0+IGNvbnNvbGUubG9nKCdbbmV4dF0gQ2FsbGVkJyksXG4gKiAgICAgZXJyb3I6ICgpID0+IGNvbnNvbGUubG9nKCdbZXJyb3JdIE5vdCBjYWxsZWQnKSxcbiAqICAgICBjb21wbGV0ZTogKCkgPT4gY29uc29sZS5sb2coJ1t0YXAgY29tcGxldGVdIE5vdCBjYWxsZWQnKVxuICogICB9KVxuICogKTtcbiAqXG4gKiBjb25zdCBzdWIgPSBzb3VyY2Uuc3Vic2NyaWJlKHtcbiAqICAgbmV4dDogeCA9PiBjb25zb2xlLmxvZyh4KSxcbiAqICAgZXJyb3I6IG5vb3AsXG4gKiAgIGNvbXBsZXRlOiAoKSA9PiBjb25zb2xlLmxvZygnW2NvbXBsZXRlXSBOb3QgY2FsbGVkJylcbiAqIH0pO1xuICpcbiAqIHRpbWVyKDE1MCkuc3Vic2NyaWJlKCgpID0+IHN1Yi51bnN1YnNjcmliZSgpKTtcbiAqXG4gKiAvLyByZXN1bHRzOlxuICogLy8gJ1tuZXh0XSBDYWxsZWQnXG4gKiAvLyAwXG4gKiAvLyAnW2ZpbmFsaXplXSBDYWxsZWQnXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBGdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBzb3VyY2UgdGVybWluYXRlcy5cbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG1pcnJvcnMgdGhlIHNvdXJjZSwgYnV0XG4gKiB3aWxsIGNhbGwgdGhlIHNwZWNpZmllZCBmdW5jdGlvbiBvbiB0ZXJtaW5hdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmFsaXplPFQ+KGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uPFQ+IHtcbiAgcmV0dXJuIG9wZXJhdGUoKHNvdXJjZSwgc3Vic2NyaWJlcikgPT4ge1xuICAgIC8vIFRPRE86IFRoaXMgdHJ5L2ZpbmFsbHkgd2FzIG9ubHkgYWRkZWQgZm9yIGB1c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nYC5cbiAgICAvLyBSRU1PVkUgVEhJUyBXSEVOIFRIQVQgSE9UIEdBUkJBR0UgSVMgUkVNT1ZFRCBJTiBWOC5cbiAgICB0cnkge1xuICAgICAgc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc3Vic2NyaWJlci5hZGQoY2FsbGJhY2spO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=
