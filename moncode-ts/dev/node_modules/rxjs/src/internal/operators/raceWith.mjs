import { raceInit } from '../observable/race.mjs';
import { operate } from '../util/lift.mjs';
import { identity } from '../util/identity.mjs';
/**
 * Creates an Observable that mirrors the first source Observable to emit a next,
 * error or complete notification from the combination of the Observable to which
 * the operator is applied and supplied Observables.
 *
 * ## Example
 *
 * ```ts
 * import { interval, map, raceWith } from 'rxjs';
 *
 * const obs1 = interval(7000).pipe(map(() => 'slow one'));
 * const obs2 = interval(3000).pipe(map(() => 'fast one'));
 * const obs3 = interval(5000).pipe(map(() => 'medium one'));
 *
 * obs1
 *   .pipe(raceWith(obs2, obs3))
 *   .subscribe(winner => console.log(winner));
 *
 * // Outputs
 * // a series of 'fast one'
 * ```
 *
 * @param otherSources Sources used to race for which Observable emits first.
 * @return A function that returns an Observable that mirrors the output of the
 * first Observable to emit an item.
 */
export function raceWith(...otherSources) {
    return !otherSources.length
        ? identity
        : operate((source, subscriber) => {
            raceInit([source, ...otherSources])(subscriber);
        });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvcmFjZVdpdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdkMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTVDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBeUJHO0FBQ0gsTUFBTSxVQUFVLFFBQVEsQ0FDdEIsR0FBRyxZQUEwQztJQUU3QyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU07UUFDekIsQ0FBQyxDQUFDLFFBQVE7UUFDVixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxFQUFFO1lBQzdCLFFBQVEsQ0FBZ0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxDQUFDO0FBQ1QsQ0FBQyIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL3JhY2VXaXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BlcmF0b3JGdW5jdGlvbiwgT2JzZXJ2YWJsZUlucHV0VHVwbGUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyByYWNlSW5pdCB9IGZyb20gJy4uL29ic2VydmFibGUvcmFjZSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBPYnNlcnZhYmxlIHRoYXQgbWlycm9ycyB0aGUgZmlyc3Qgc291cmNlIE9ic2VydmFibGUgdG8gZW1pdCBhIG5leHQsXG4gKiBlcnJvciBvciBjb21wbGV0ZSBub3RpZmljYXRpb24gZnJvbSB0aGUgY29tYmluYXRpb24gb2YgdGhlIE9ic2VydmFibGUgdG8gd2hpY2hcbiAqIHRoZSBvcGVyYXRvciBpcyBhcHBsaWVkIGFuZCBzdXBwbGllZCBPYnNlcnZhYmxlcy5cbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGludGVydmFsLCBtYXAsIHJhY2VXaXRoIH0gZnJvbSAncnhqcyc7XG4gKlxuICogY29uc3Qgb2JzMSA9IGludGVydmFsKDcwMDApLnBpcGUobWFwKCgpID0+ICdzbG93IG9uZScpKTtcbiAqIGNvbnN0IG9iczIgPSBpbnRlcnZhbCgzMDAwKS5waXBlKG1hcCgoKSA9PiAnZmFzdCBvbmUnKSk7XG4gKiBjb25zdCBvYnMzID0gaW50ZXJ2YWwoNTAwMCkucGlwZShtYXAoKCkgPT4gJ21lZGl1bSBvbmUnKSk7XG4gKlxuICogb2JzMVxuICogICAucGlwZShyYWNlV2l0aChvYnMyLCBvYnMzKSlcbiAqICAgLnN1YnNjcmliZSh3aW5uZXIgPT4gY29uc29sZS5sb2cod2lubmVyKSk7XG4gKlxuICogLy8gT3V0cHV0c1xuICogLy8gYSBzZXJpZXMgb2YgJ2Zhc3Qgb25lJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIG90aGVyU291cmNlcyBTb3VyY2VzIHVzZWQgdG8gcmFjZSBmb3Igd2hpY2ggT2JzZXJ2YWJsZSBlbWl0cyBmaXJzdC5cbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG1pcnJvcnMgdGhlIG91dHB1dCBvZiB0aGVcbiAqIGZpcnN0IE9ic2VydmFibGUgdG8gZW1pdCBhbiBpdGVtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmFjZVdpdGg8VCwgQSBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXT4oXG4gIC4uLm90aGVyU291cmNlczogWy4uLk9ic2VydmFibGVJbnB1dFR1cGxlPEE+XVxuKTogT3BlcmF0b3JGdW5jdGlvbjxULCBUIHwgQVtudW1iZXJdPiB7XG4gIHJldHVybiAhb3RoZXJTb3VyY2VzLmxlbmd0aFxuICAgID8gaWRlbnRpdHlcbiAgICA6IG9wZXJhdGUoKHNvdXJjZSwgc3Vic2NyaWJlcikgPT4ge1xuICAgICAgICByYWNlSW5pdDxUIHwgQVtudW1iZXJdPihbc291cmNlLCAuLi5vdGhlclNvdXJjZXNdKShzdWJzY3JpYmVyKTtcbiAgICAgIH0pO1xufVxuIl19
