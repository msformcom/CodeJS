import { operate } from '../util/lift.mjs';
import { mergeInternals } from './mergeInternals.mjs';
/**
 * Applies an accumulator function over the source Observable where the
 * accumulator function itself returns an Observable, then each intermediate
 * Observable returned is merged into the output Observable.
 *
 * <span class="informal">It's like {@link scan}, but the Observables returned
 * by the accumulator are merged into the outer Observable.</span>
 *
 * The first parameter of the `mergeScan` is an `accumulator` function which is
 * being called every time the source Observable emits a value. `mergeScan` will
 * subscribe to the value returned by the `accumulator` function and will emit
 * values to the subscriber emitted by inner Observable.
 *
 * The `accumulator` function is being called with three parameters passed to it:
 * `acc`, `value` and `index`. The `acc` parameter is used as the state parameter
 * whose value is initially set to the `seed` parameter (the second parameter
 * passed to the `mergeScan` operator).
 *
 * `mergeScan` internally keeps the value of the `acc` parameter: as long as the
 * source Observable emits without inner Observable emitting, the `acc` will be
 * set to `seed`. The next time the inner Observable emits a value, `mergeScan`
 * will internally remember it and it will be passed to the `accumulator`
 * function as `acc` parameter the next time source emits.
 *
 * The `value` parameter of the `accumulator` function is the value emitted by the
 * source Observable, while the `index` is a number which represent the order of the
 * current emission by the source Observable. It starts with 0.
 *
 * The last parameter to the `mergeScan` is the `concurrent` value which defaults
 * to Infinity. It represents the maximum number of inner Observable subscriptions
 * at a time.
 *
 * ## Example
 *
 * Count the number of click events
 *
 * ```ts
 * import { fromEvent, map, mergeScan, of } from 'rxjs';
 *
 * const click$ = fromEvent(document, 'click');
 * const one$ = click$.pipe(map(() => 1));
 * const seed = 0;
 * const count$ = one$.pipe(
 *   mergeScan((acc, one) => of(acc + one), seed)
 * );
 *
 * count$.subscribe(x => console.log(x));
 *
 * // Results:
 * // 1
 * // 2
 * // 3
 * // 4
 * // ...and so on for each click
 * ```
 *
 * @see {@link scan}
 * @see {@link switchScan}
 *
 * @param {function(acc: R, value: T): Observable<R>} accumulator
 * The accumulator function called on each source value.
 * @param seed The initial accumulation value.
 * @param {number} [concurrent=Infinity] Maximum number of
 * input Observables being subscribed to concurrently.
 * @return A function that returns an Observable of the accumulated values.
 */
export function mergeScan(accumulator, seed, concurrent = Infinity) {
    return operate((source, subscriber) => {
        // The accumulated state.
        let state = seed;
        return mergeInternals(source, subscriber, (value, index) => accumulator(state, value, index), concurrent, (value) => {
            state = value;
        }, false, undefined, () => (state = null));
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VTY2FuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdkMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWlFRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQ3ZCLFdBQW9FLEVBQ3BFLElBQU8sRUFDUCxVQUFVLEdBQUcsUUFBUTtJQUVyQixPQUFPLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRTtRQUNwQyx5QkFBeUI7UUFDekIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBRWpCLE9BQU8sY0FBYyxDQUNuQixNQUFNLEVBQ04sVUFBVSxFQUNWLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEVBQ2xELFVBQVUsRUFDVixDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ1IsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNoQixDQUFDLEVBQ0QsS0FBSyxFQUNMLFNBQVMsRUFDVCxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFLLENBQUMsQ0FDdEIsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlU2Nhbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGVJbnB1dCwgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgbWVyZ2VJbnRlcm5hbHMgfSBmcm9tICcuL21lcmdlSW50ZXJuYWxzJztcblxuLyoqXG4gKiBBcHBsaWVzIGFuIGFjY3VtdWxhdG9yIGZ1bmN0aW9uIG92ZXIgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHdoZXJlIHRoZVxuICogYWNjdW11bGF0b3IgZnVuY3Rpb24gaXRzZWxmIHJldHVybnMgYW4gT2JzZXJ2YWJsZSwgdGhlbiBlYWNoIGludGVybWVkaWF0ZVxuICogT2JzZXJ2YWJsZSByZXR1cm5lZCBpcyBtZXJnZWQgaW50byB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkl0J3MgbGlrZSB7QGxpbmsgc2Nhbn0sIGJ1dCB0aGUgT2JzZXJ2YWJsZXMgcmV0dXJuZWRcbiAqIGJ5IHRoZSBhY2N1bXVsYXRvciBhcmUgbWVyZ2VkIGludG8gdGhlIG91dGVyIE9ic2VydmFibGUuPC9zcGFuPlxuICpcbiAqIFRoZSBmaXJzdCBwYXJhbWV0ZXIgb2YgdGhlIGBtZXJnZVNjYW5gIGlzIGFuIGBhY2N1bXVsYXRvcmAgZnVuY3Rpb24gd2hpY2ggaXNcbiAqIGJlaW5nIGNhbGxlZCBldmVyeSB0aW1lIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlLiBgbWVyZ2VTY2FuYCB3aWxsXG4gKiBzdWJzY3JpYmUgdG8gdGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoZSBgYWNjdW11bGF0b3JgIGZ1bmN0aW9uIGFuZCB3aWxsIGVtaXRcbiAqIHZhbHVlcyB0byB0aGUgc3Vic2NyaWJlciBlbWl0dGVkIGJ5IGlubmVyIE9ic2VydmFibGUuXG4gKlxuICogVGhlIGBhY2N1bXVsYXRvcmAgZnVuY3Rpb24gaXMgYmVpbmcgY2FsbGVkIHdpdGggdGhyZWUgcGFyYW1ldGVycyBwYXNzZWQgdG8gaXQ6XG4gKiBgYWNjYCwgYHZhbHVlYCBhbmQgYGluZGV4YC4gVGhlIGBhY2NgIHBhcmFtZXRlciBpcyB1c2VkIGFzIHRoZSBzdGF0ZSBwYXJhbWV0ZXJcbiAqIHdob3NlIHZhbHVlIGlzIGluaXRpYWxseSBzZXQgdG8gdGhlIGBzZWVkYCBwYXJhbWV0ZXIgKHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiBwYXNzZWQgdG8gdGhlIGBtZXJnZVNjYW5gIG9wZXJhdG9yKS5cbiAqXG4gKiBgbWVyZ2VTY2FuYCBpbnRlcm5hbGx5IGtlZXBzIHRoZSB2YWx1ZSBvZiB0aGUgYGFjY2AgcGFyYW1ldGVyOiBhcyBsb25nIGFzIHRoZVxuICogc291cmNlIE9ic2VydmFibGUgZW1pdHMgd2l0aG91dCBpbm5lciBPYnNlcnZhYmxlIGVtaXR0aW5nLCB0aGUgYGFjY2Agd2lsbCBiZVxuICogc2V0IHRvIGBzZWVkYC4gVGhlIG5leHQgdGltZSB0aGUgaW5uZXIgT2JzZXJ2YWJsZSBlbWl0cyBhIHZhbHVlLCBgbWVyZ2VTY2FuYFxuICogd2lsbCBpbnRlcm5hbGx5IHJlbWVtYmVyIGl0IGFuZCBpdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgYGFjY3VtdWxhdG9yYFxuICogZnVuY3Rpb24gYXMgYGFjY2AgcGFyYW1ldGVyIHRoZSBuZXh0IHRpbWUgc291cmNlIGVtaXRzLlxuICpcbiAqIFRoZSBgdmFsdWVgIHBhcmFtZXRlciBvZiB0aGUgYGFjY3VtdWxhdG9yYCBmdW5jdGlvbiBpcyB0aGUgdmFsdWUgZW1pdHRlZCBieSB0aGVcbiAqIHNvdXJjZSBPYnNlcnZhYmxlLCB3aGlsZSB0aGUgYGluZGV4YCBpcyBhIG51bWJlciB3aGljaCByZXByZXNlbnQgdGhlIG9yZGVyIG9mIHRoZVxuICogY3VycmVudCBlbWlzc2lvbiBieSB0aGUgc291cmNlIE9ic2VydmFibGUuIEl0IHN0YXJ0cyB3aXRoIDAuXG4gKlxuICogVGhlIGxhc3QgcGFyYW1ldGVyIHRvIHRoZSBgbWVyZ2VTY2FuYCBpcyB0aGUgYGNvbmN1cnJlbnRgIHZhbHVlIHdoaWNoIGRlZmF1bHRzXG4gKiB0byBJbmZpbml0eS4gSXQgcmVwcmVzZW50cyB0aGUgbWF4aW11bSBudW1iZXIgb2YgaW5uZXIgT2JzZXJ2YWJsZSBzdWJzY3JpcHRpb25zXG4gKiBhdCBhIHRpbWUuXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIENvdW50IHRoZSBudW1iZXIgb2YgY2xpY2sgZXZlbnRzXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGZyb21FdmVudCwgbWFwLCBtZXJnZVNjYW4sIG9mIH0gZnJvbSAncnhqcyc7XG4gKlxuICogY29uc3QgY2xpY2skID0gZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIGNvbnN0IG9uZSQgPSBjbGljayQucGlwZShtYXAoKCkgPT4gMSkpO1xuICogY29uc3Qgc2VlZCA9IDA7XG4gKiBjb25zdCBjb3VudCQgPSBvbmUkLnBpcGUoXG4gKiAgIG1lcmdlU2NhbigoYWNjLCBvbmUpID0+IG9mKGFjYyArIG9uZSksIHNlZWQpXG4gKiApO1xuICpcbiAqIGNvdW50JC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogLy8gUmVzdWx0czpcbiAqIC8vIDFcbiAqIC8vIDJcbiAqIC8vIDNcbiAqIC8vIDRcbiAqIC8vIC4uLmFuZCBzbyBvbiBmb3IgZWFjaCBjbGlja1xuICogYGBgXG4gKlxuICogQHNlZSB7QGxpbmsgc2Nhbn1cbiAqIEBzZWUge0BsaW5rIHN3aXRjaFNjYW59XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihhY2M6IFIsIHZhbHVlOiBUKTogT2JzZXJ2YWJsZTxSPn0gYWNjdW11bGF0b3JcbiAqIFRoZSBhY2N1bXVsYXRvciBmdW5jdGlvbiBjYWxsZWQgb24gZWFjaCBzb3VyY2UgdmFsdWUuXG4gKiBAcGFyYW0gc2VlZCBUaGUgaW5pdGlhbCBhY2N1bXVsYXRpb24gdmFsdWUuXG4gKiBAcGFyYW0ge251bWJlcn0gW2NvbmN1cnJlbnQ9SW5maW5pdHldIE1heGltdW0gbnVtYmVyIG9mXG4gKiBpbnB1dCBPYnNlcnZhYmxlcyBiZWluZyBzdWJzY3JpYmVkIHRvIGNvbmN1cnJlbnRseS5cbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gT2JzZXJ2YWJsZSBvZiB0aGUgYWNjdW11bGF0ZWQgdmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VTY2FuPFQsIFI+KFxuICBhY2N1bXVsYXRvcjogKGFjYzogUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IE9ic2VydmFibGVJbnB1dDxSPixcbiAgc2VlZDogUixcbiAgY29uY3VycmVudCA9IEluZmluaXR5XG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFI+IHtcbiAgcmV0dXJuIG9wZXJhdGUoKHNvdXJjZSwgc3Vic2NyaWJlcikgPT4ge1xuICAgIC8vIFRoZSBhY2N1bXVsYXRlZCBzdGF0ZS5cbiAgICBsZXQgc3RhdGUgPSBzZWVkO1xuXG4gICAgcmV0dXJuIG1lcmdlSW50ZXJuYWxzKFxuICAgICAgc291cmNlLFxuICAgICAgc3Vic2NyaWJlcixcbiAgICAgICh2YWx1ZSwgaW5kZXgpID0+IGFjY3VtdWxhdG9yKHN0YXRlLCB2YWx1ZSwgaW5kZXgpLFxuICAgICAgY29uY3VycmVudCxcbiAgICAgICh2YWx1ZSkgPT4ge1xuICAgICAgICBzdGF0ZSA9IHZhbHVlO1xuICAgICAgfSxcbiAgICAgIGZhbHNlLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgKCkgPT4gKHN0YXRlID0gbnVsbCEpXG4gICAgKTtcbiAgfSk7XG59XG4iXX0=
