import { Subject } from '../Subject.mjs';
import { multicast } from './multicast.mjs';
import { connect } from './connect.mjs';
/**
 * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called
 * before it begins emitting items to those Observers that have subscribed to it.
 *
 * <span class="informal">Makes a cold Observable hot</span>
 *
 * ![](publish.png)
 *
 * ## Examples
 *
 * Make `source$` hot by applying `publish` operator, then merge each inner observable into a single one
 * and subscribe
 *
 * ```ts
 * import { zip, interval, of, map, publish, merge, tap } from 'rxjs';
 *
 * const source$ = zip(interval(2000), of(1, 2, 3, 4, 5, 6, 7, 8, 9))
 *   .pipe(map(([, number]) => number));
 *
 * source$
 *   .pipe(
 *     publish(multicasted$ =>
 *       merge(
 *         multicasted$.pipe(tap(x => console.log('Stream 1:', x))),
 *         multicasted$.pipe(tap(x => console.log('Stream 2:', x))),
 *         multicasted$.pipe(tap(x => console.log('Stream 3:', x)))
 *       )
 *     )
 *   )
 *   .subscribe();
 *
 * // Results every two seconds
 * // Stream 1: 1
 * // Stream 2: 1
 * // Stream 3: 1
 * // ...
 * // Stream 1: 9
 * // Stream 2: 9
 * // Stream 3: 9
 * ```
 *
 * @see {@link publishLast}
 * @see {@link publishReplay}
 * @see {@link publishBehavior}
 *
 * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times
 * as needed, without causing multiple subscriptions to the source sequence.
 * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
 * @return A function that returns a ConnectableObservable that upon connection
 * causes the source Observable to emit items to its Observers.
 * @deprecated Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the
 * {@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's
 * behaviors.
 * Details: https://rxjs.dev/deprecations/multicasting
 */
export function publish(selector) {
    return selector ? (source) => connect(selector)(source) : (source) => multicast(new Subject())(source);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHeEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQThCcEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNERztBQUNILE1BQU0sVUFBVSxPQUFPLENBQU8sUUFBaUM7SUFDN0QsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxPQUFPLEVBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVHLENBQUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuaW1wb3J0IHsgbXVsdGljYXN0IH0gZnJvbSAnLi9tdWx0aWNhc3QnO1xuaW1wb3J0IHsgQ29ubmVjdGFibGVPYnNlcnZhYmxlIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGUnO1xuaW1wb3J0IHsgTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uLCBPcGVyYXRvckZ1bmN0aW9uLCBVbmFyeUZ1bmN0aW9uLCBPYnNlcnZhYmxlSW5wdXQsIE9ic2VydmVkVmFsdWVPZiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICcuL2Nvbm5lY3QnO1xuXG4vKipcbiAqIFJldHVybnMgYSBjb25uZWN0YWJsZSBvYnNlcnZhYmxlIHRoYXQsIHdoZW4gY29ubmVjdGVkLCB3aWxsIG11bHRpY2FzdFxuICogYWxsIHZhbHVlcyB0aHJvdWdoIGEgc2luZ2xlIHVuZGVybHlpbmcge0BsaW5rIFN1YmplY3R9IGluc3RhbmNlLlxuICpcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC4gVG8gY3JlYXRlIGEgY29ubmVjdGFibGUgb2JzZXJ2YWJsZSwgdXNlIHtAbGluayBjb25uZWN0YWJsZX0uXG4gKiBgc291cmNlLnBpcGUocHVibGlzaCgpKWAgaXMgZXF1aXZhbGVudCB0b1xuICogYGNvbm5lY3RhYmxlKHNvdXJjZSwgeyBjb25uZWN0b3I6ICgpID0+IG5ldyBTdWJqZWN0KCksIHJlc2V0T25EaXNjb25uZWN0OiBmYWxzZSB9KWAuXG4gKiBJZiB5b3UncmUgdXNpbmcge0BsaW5rIHJlZkNvdW50fSBhZnRlciBgcHVibGlzaGAsIHVzZSB7QGxpbmsgc2hhcmV9IG9wZXJhdG9yIGluc3RlYWQuXG4gKiBgc291cmNlLnBpcGUocHVibGlzaCgpLCByZWZDb3VudCgpKWAgaXMgZXF1aXZhbGVudCB0b1xuICogYHNvdXJjZS5waXBlKHNoYXJlKHsgcmVzZXRPbkVycm9yOiBmYWxzZSwgcmVzZXRPbkNvbXBsZXRlOiBmYWxzZSwgcmVzZXRPblJlZkNvdW50WmVybzogZmFsc2UgfSkpYC5cbiAqIERldGFpbHM6IGh0dHBzOi8vcnhqcy5kZXYvZGVwcmVjYXRpb25zL211bHRpY2FzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaDxUPigpOiBVbmFyeUZ1bmN0aW9uPE9ic2VydmFibGU8VD4sIENvbm5lY3RhYmxlT2JzZXJ2YWJsZTxUPj47XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYnNlcnZhYmxlLCB0aGF0IHdoZW4gc3Vic2NyaWJlZCB0bywgY3JlYXRlcyBhbiB1bmRlcmx5aW5nIHtAbGluayBTdWJqZWN0fSxcbiAqIHByb3ZpZGVzIGFuIG9ic2VydmFibGUgdmlldyBvZiBpdCB0byBhIGBzZWxlY3RvcmAgZnVuY3Rpb24sIHRha2VzIHRoZSBvYnNlcnZhYmxlIHJlc3VsdCBvZlxuICogdGhhdCBzZWxlY3RvciBmdW5jdGlvbiBhbmQgc3Vic2NyaWJlcyB0byBpdCwgc2VuZGluZyBpdHMgdmFsdWVzIHRvIHRoZSBjb25zdW1lciwgX3RoZW5fIGNvbm5lY3RzXG4gKiB0aGUgc3ViamVjdCB0byB0aGUgb3JpZ2luYWwgc291cmNlLlxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciBBIGZ1bmN0aW9uIHVzZWQgdG8gc2V0dXAgbXVsdGljYXN0aW5nIHByaW9yIHRvIGF1dG9tYXRpYyBjb25uZWN0aW9uLlxuICpcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC4gVXNlIHRoZSB7QGxpbmsgY29ubmVjdH0gb3BlcmF0b3IgaW5zdGVhZC5cbiAqIGBwdWJsaXNoKHNlbGVjdG9yKWAgaXMgZXF1aXZhbGVudCB0byBgY29ubmVjdChzZWxlY3RvcilgLlxuICogRGV0YWlsczogaHR0cHM6Ly9yeGpzLmRldi9kZXByZWNhdGlvbnMvbXVsdGljYXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoPFQsIE8gZXh0ZW5kcyBPYnNlcnZhYmxlSW5wdXQ8YW55Pj4oc2VsZWN0b3I6IChzaGFyZWQ6IE9ic2VydmFibGU8VD4pID0+IE8pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIE9ic2VydmVkVmFsdWVPZjxPPj47XG5cbi8qKlxuICogUmV0dXJucyBhIENvbm5lY3RhYmxlT2JzZXJ2YWJsZSwgd2hpY2ggaXMgYSB2YXJpZXR5IG9mIE9ic2VydmFibGUgdGhhdCB3YWl0cyB1bnRpbCBpdHMgY29ubmVjdCBtZXRob2QgaXMgY2FsbGVkXG4gKiBiZWZvcmUgaXQgYmVnaW5zIGVtaXR0aW5nIGl0ZW1zIHRvIHRob3NlIE9ic2VydmVycyB0aGF0IGhhdmUgc3Vic2NyaWJlZCB0byBpdC5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+TWFrZXMgYSBjb2xkIE9ic2VydmFibGUgaG90PC9zcGFuPlxuICpcbiAqICFbXShwdWJsaXNoLnBuZylcbiAqXG4gKiAjIyBFeGFtcGxlc1xuICpcbiAqIE1ha2UgYHNvdXJjZSRgIGhvdCBieSBhcHBseWluZyBgcHVibGlzaGAgb3BlcmF0b3IsIHRoZW4gbWVyZ2UgZWFjaCBpbm5lciBvYnNlcnZhYmxlIGludG8gYSBzaW5nbGUgb25lXG4gKiBhbmQgc3Vic2NyaWJlXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IHppcCwgaW50ZXJ2YWwsIG9mLCBtYXAsIHB1Ymxpc2gsIG1lcmdlLCB0YXAgfSBmcm9tICdyeGpzJztcbiAqXG4gKiBjb25zdCBzb3VyY2UkID0gemlwKGludGVydmFsKDIwMDApLCBvZigxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5KSlcbiAqICAgLnBpcGUobWFwKChbLCBudW1iZXJdKSA9PiBudW1iZXIpKTtcbiAqXG4gKiBzb3VyY2UkXG4gKiAgIC5waXBlKFxuICogICAgIHB1Ymxpc2gobXVsdGljYXN0ZWQkID0+XG4gKiAgICAgICBtZXJnZShcbiAqICAgICAgICAgbXVsdGljYXN0ZWQkLnBpcGUodGFwKHggPT4gY29uc29sZS5sb2coJ1N0cmVhbSAxOicsIHgpKSksXG4gKiAgICAgICAgIG11bHRpY2FzdGVkJC5waXBlKHRhcCh4ID0+IGNvbnNvbGUubG9nKCdTdHJlYW0gMjonLCB4KSkpLFxuICogICAgICAgICBtdWx0aWNhc3RlZCQucGlwZSh0YXAoeCA9PiBjb25zb2xlLmxvZygnU3RyZWFtIDM6JywgeCkpKVxuICogICAgICAgKVxuICogICAgIClcbiAqICAgKVxuICogICAuc3Vic2NyaWJlKCk7XG4gKlxuICogLy8gUmVzdWx0cyBldmVyeSB0d28gc2Vjb25kc1xuICogLy8gU3RyZWFtIDE6IDFcbiAqIC8vIFN0cmVhbSAyOiAxXG4gKiAvLyBTdHJlYW0gMzogMVxuICogLy8gLi4uXG4gKiAvLyBTdHJlYW0gMTogOVxuICogLy8gU3RyZWFtIDI6IDlcbiAqIC8vIFN0cmVhbSAzOiA5XG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBwdWJsaXNoTGFzdH1cbiAqIEBzZWUge0BsaW5rIHB1Ymxpc2hSZXBsYXl9XG4gKiBAc2VlIHtAbGluayBwdWJsaXNoQmVoYXZpb3J9XG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3NlbGVjdG9yXSAtIE9wdGlvbmFsIHNlbGVjdG9yIGZ1bmN0aW9uIHdoaWNoIGNhbiB1c2UgdGhlIG11bHRpY2FzdGVkIHNvdXJjZSBzZXF1ZW5jZSBhcyBtYW55IHRpbWVzXG4gKiBhcyBuZWVkZWQsIHdpdGhvdXQgY2F1c2luZyBtdWx0aXBsZSBzdWJzY3JpcHRpb25zIHRvIHRoZSBzb3VyY2Ugc2VxdWVuY2UuXG4gKiBTdWJzY3JpYmVycyB0byB0aGUgZ2l2ZW4gc291cmNlIHdpbGwgcmVjZWl2ZSBhbGwgbm90aWZpY2F0aW9ucyBvZiB0aGUgc291cmNlIGZyb20gdGhlIHRpbWUgb2YgdGhlIHN1YnNjcmlwdGlvbiBvbi5cbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBDb25uZWN0YWJsZU9ic2VydmFibGUgdGhhdCB1cG9uIGNvbm5lY3Rpb25cbiAqIGNhdXNlcyB0aGUgc291cmNlIE9ic2VydmFibGUgdG8gZW1pdCBpdGVtcyB0byBpdHMgT2JzZXJ2ZXJzLlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY4LiBVc2UgdGhlIHtAbGluayBjb25uZWN0YWJsZX0gb2JzZXJ2YWJsZSwgdGhlIHtAbGluayBjb25uZWN0fSBvcGVyYXRvciBvciB0aGVcbiAqIHtAbGluayBzaGFyZX0gb3BlcmF0b3IgaW5zdGVhZC4gU2VlIHRoZSBvdmVybG9hZHMgYmVsb3cgZm9yIGVxdWl2YWxlbnQgcmVwbGFjZW1lbnQgZXhhbXBsZXMgb2YgdGhpcyBvcGVyYXRvcidzXG4gKiBiZWhhdmlvcnMuXG4gKiBEZXRhaWxzOiBodHRwczovL3J4anMuZGV2L2RlcHJlY2F0aW9ucy9tdWx0aWNhc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2g8VCwgUj4oc2VsZWN0b3I/OiBPcGVyYXRvckZ1bmN0aW9uPFQsIFI+KTogTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uPFQ+IHwgT3BlcmF0b3JGdW5jdGlvbjxULCBSPiB7XG4gIHJldHVybiBzZWxlY3RvciA/IChzb3VyY2UpID0+IGNvbm5lY3Qoc2VsZWN0b3IpKHNvdXJjZSkgOiAoc291cmNlKSA9PiBtdWx0aWNhc3QobmV3IFN1YmplY3Q8VD4oKSkoc291cmNlKTtcbn1cbiJdfQ==
