import { operate } from '../util/lift.mjs';
import { createOperatorSubscriber } from './OperatorSubscriber.mjs';
import { innerFrom } from '../observable/innerFrom.mjs';
import { noop } from '../util/noop.mjs';
/**
 * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.
 *
 * The `skipUntil` operator causes the observable stream to skip the emission of values until the passed in observable
 * emits the first value. This can be particularly useful in combination with user interactions, responses of HTTP
 * requests or waiting for specific times to pass by.
 *
 * ![](skipUntil.png)
 *
 * Internally, the `skipUntil` operator subscribes to the passed in `notifier` `ObservableInput` (which gets converted
 * to an Observable) in order to recognize the emission of its first value. When `notifier` emits next, the operator
 * unsubscribes from it and starts emitting the values of the *source* observable until it completes or errors. It
 * will never let the *source* observable emit any values if the `notifier` completes or throws an error without
 * emitting a value before.
 *
 * ## Example
 *
 * In the following example, all emitted values of the interval observable are skipped until the user clicks anywhere
 * within the page
 *
 * ```ts
 * import { interval, fromEvent, skipUntil } from 'rxjs';
 *
 * const intervalObservable = interval(1000);
 * const click = fromEvent(document, 'click');
 *
 * const emitAfterClick = intervalObservable.pipe(
 *   skipUntil(click)
 * );
 * // clicked at 4.6s. output: 5...6...7...8........ or
 * // clicked at 7.3s. output: 8...9...10..11.......
 * emitAfterClick.subscribe(value => console.log(value));
 * ```
 *
 * @see {@link last}
 * @see {@link skip}
 * @see {@link skipWhile}
 * @see {@link skipLast}
 *
 * @param notifier An `ObservableInput` that has to emit an item before the source Observable elements begin to
 * be mirrored by the resulting Observable.
 * @return A function that returns an Observable that skips items from the
 * source Observable until the `notifier` Observable emits an item, then emits the
 * remaining items.
 */
export function skipUntil(notifier) {
    return operate((source, subscriber) => {
        let taking = false;
        const skipSubscriber = createOperatorSubscriber(subscriber, () => {
            skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();
            taking = true;
        }, noop);
        innerFrom(notifier).subscribe(skipSubscriber);
        source.subscribe(createOperatorSubscriber(subscriber, (value) => taking && subscriber.next(value)));
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFVudGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdkMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFcEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNENHO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBSSxRQUE4QjtJQUN6RCxPQUFPLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRTtRQUNwQyxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFFbkIsTUFBTSxjQUFjLEdBQUcsd0JBQXdCLENBQzdDLFVBQVUsRUFDVixHQUFHLEVBQUU7WUFDSCxjQUFjLGFBQWQsY0FBYyx1QkFBZCxjQUFjLENBQUUsV0FBVyxFQUFFLENBQUM7WUFDOUIsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNoQixDQUFDLEVBQ0QsSUFBSSxDQUNMLENBQUM7UUFFRixTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTlDLE1BQU0sQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxNQUFNLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEcsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFVudGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uLCBPYnNlcnZhYmxlSW5wdXQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlsL25vb3AnO1xuXG4vKipcbiAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IHNraXBzIGl0ZW1zIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHVudGlsIGEgc2Vjb25kIE9ic2VydmFibGUgZW1pdHMgYW4gaXRlbS5cbiAqXG4gKiBUaGUgYHNraXBVbnRpbGAgb3BlcmF0b3IgY2F1c2VzIHRoZSBvYnNlcnZhYmxlIHN0cmVhbSB0byBza2lwIHRoZSBlbWlzc2lvbiBvZiB2YWx1ZXMgdW50aWwgdGhlIHBhc3NlZCBpbiBvYnNlcnZhYmxlXG4gKiBlbWl0cyB0aGUgZmlyc3QgdmFsdWUuIFRoaXMgY2FuIGJlIHBhcnRpY3VsYXJseSB1c2VmdWwgaW4gY29tYmluYXRpb24gd2l0aCB1c2VyIGludGVyYWN0aW9ucywgcmVzcG9uc2VzIG9mIEhUVFBcbiAqIHJlcXVlc3RzIG9yIHdhaXRpbmcgZm9yIHNwZWNpZmljIHRpbWVzIHRvIHBhc3MgYnkuXG4gKlxuICogIVtdKHNraXBVbnRpbC5wbmcpXG4gKlxuICogSW50ZXJuYWxseSwgdGhlIGBza2lwVW50aWxgIG9wZXJhdG9yIHN1YnNjcmliZXMgdG8gdGhlIHBhc3NlZCBpbiBgbm90aWZpZXJgIGBPYnNlcnZhYmxlSW5wdXRgICh3aGljaCBnZXRzIGNvbnZlcnRlZFxuICogdG8gYW4gT2JzZXJ2YWJsZSkgaW4gb3JkZXIgdG8gcmVjb2duaXplIHRoZSBlbWlzc2lvbiBvZiBpdHMgZmlyc3QgdmFsdWUuIFdoZW4gYG5vdGlmaWVyYCBlbWl0cyBuZXh0LCB0aGUgb3BlcmF0b3JcbiAqIHVuc3Vic2NyaWJlcyBmcm9tIGl0IGFuZCBzdGFydHMgZW1pdHRpbmcgdGhlIHZhbHVlcyBvZiB0aGUgKnNvdXJjZSogb2JzZXJ2YWJsZSB1bnRpbCBpdCBjb21wbGV0ZXMgb3IgZXJyb3JzLiBJdFxuICogd2lsbCBuZXZlciBsZXQgdGhlICpzb3VyY2UqIG9ic2VydmFibGUgZW1pdCBhbnkgdmFsdWVzIGlmIHRoZSBgbm90aWZpZXJgIGNvbXBsZXRlcyBvciB0aHJvd3MgYW4gZXJyb3Igd2l0aG91dFxuICogZW1pdHRpbmcgYSB2YWx1ZSBiZWZvcmUuXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIEluIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSwgYWxsIGVtaXR0ZWQgdmFsdWVzIG9mIHRoZSBpbnRlcnZhbCBvYnNlcnZhYmxlIGFyZSBza2lwcGVkIHVudGlsIHRoZSB1c2VyIGNsaWNrcyBhbnl3aGVyZVxuICogd2l0aGluIHRoZSBwYWdlXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGludGVydmFsLCBmcm9tRXZlbnQsIHNraXBVbnRpbCB9IGZyb20gJ3J4anMnO1xuICpcbiAqIGNvbnN0IGludGVydmFsT2JzZXJ2YWJsZSA9IGludGVydmFsKDEwMDApO1xuICogY29uc3QgY2xpY2sgPSBmcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICpcbiAqIGNvbnN0IGVtaXRBZnRlckNsaWNrID0gaW50ZXJ2YWxPYnNlcnZhYmxlLnBpcGUoXG4gKiAgIHNraXBVbnRpbChjbGljaylcbiAqICk7XG4gKiAvLyBjbGlja2VkIGF0IDQuNnMuIG91dHB1dDogNS4uLjYuLi43Li4uOC4uLi4uLi4uIG9yXG4gKiAvLyBjbGlja2VkIGF0IDcuM3MuIG91dHB1dDogOC4uLjkuLi4xMC4uMTEuLi4uLi4uXG4gKiBlbWl0QWZ0ZXJDbGljay5zdWJzY3JpYmUodmFsdWUgPT4gY29uc29sZS5sb2codmFsdWUpKTtcbiAqIGBgYFxuICpcbiAqIEBzZWUge0BsaW5rIGxhc3R9XG4gKiBAc2VlIHtAbGluayBza2lwfVxuICogQHNlZSB7QGxpbmsgc2tpcFdoaWxlfVxuICogQHNlZSB7QGxpbmsgc2tpcExhc3R9XG4gKlxuICogQHBhcmFtIG5vdGlmaWVyIEFuIGBPYnNlcnZhYmxlSW5wdXRgIHRoYXQgaGFzIHRvIGVtaXQgYW4gaXRlbSBiZWZvcmUgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGVsZW1lbnRzIGJlZ2luIHRvXG4gKiBiZSBtaXJyb3JlZCBieSB0aGUgcmVzdWx0aW5nIE9ic2VydmFibGUuXG4gKiBAcmV0dXJuIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBza2lwcyBpdGVtcyBmcm9tIHRoZVxuICogc291cmNlIE9ic2VydmFibGUgdW50aWwgdGhlIGBub3RpZmllcmAgT2JzZXJ2YWJsZSBlbWl0cyBhbiBpdGVtLCB0aGVuIGVtaXRzIHRoZVxuICogcmVtYWluaW5nIGl0ZW1zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2tpcFVudGlsPFQ+KG5vdGlmaWVyOiBPYnNlcnZhYmxlSW5wdXQ8YW55Pik6IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbjxUPiB7XG4gIHJldHVybiBvcGVyYXRlKChzb3VyY2UsIHN1YnNjcmliZXIpID0+IHtcbiAgICBsZXQgdGFraW5nID0gZmFsc2U7XG5cbiAgICBjb25zdCBza2lwU3Vic2NyaWJlciA9IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihcbiAgICAgIHN1YnNjcmliZXIsXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHNraXBTdWJzY3JpYmVyPy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0YWtpbmcgPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIG5vb3BcbiAgICApO1xuXG4gICAgaW5uZXJGcm9tKG5vdGlmaWVyKS5zdWJzY3JpYmUoc2tpcFN1YnNjcmliZXIpO1xuXG4gICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgKHZhbHVlKSA9PiB0YWtpbmcgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKSkpO1xuICB9KTtcbn1cbiJdfQ==
