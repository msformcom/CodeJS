import { identity } from '../util/identity.mjs';
import { mapOneOrManyArgs } from '../util/mapOneOrManyArgs.mjs';
import { pipe } from '../util/pipe.mjs';
import { mergeMap } from './mergeMap.mjs';
import { toArray } from './toArray.mjs';
/**
 * Collects all of the inner sources from source observable. Then, once the
 * source completes, joins the values using the given static.
 *
 * This is used for {@link combineLatestAll} and {@link zipAll} which both have the
 * same behavior of collecting all inner observables, then operating on them.
 *
 * @param joinFn The type of static join to apply to the sources collected
 * @param project The projection function to apply to the values, if any
 */
export function joinAllInternals(joinFn, project) {
    return pipe(
    // Collect all inner sources into an array, and emit them when the
    // source completes.
    toArray(), 
    // Run the join function on the collected array of inner sources.
    mergeMap((sources) => joinFn(sources)), 
    // If a projection function was supplied, apply it to each result.
    project ? mapOneOrManyArgs(project) : identity);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvam9pbkFsbEludGVybmFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDNUQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFcEM7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUFPLE1BQXdELEVBQUUsT0FBK0I7SUFDOUgsT0FBTyxJQUFJO0lBQ1Qsa0VBQWtFO0lBQ2xFLG9CQUFvQjtJQUNwQixPQUFPLEVBQWdFO0lBQ3ZFLGlFQUFpRTtJQUNqRSxRQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0QyxrRUFBa0U7SUFDbEUsT0FBTyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUUsUUFBZ0IsQ0FDeEQsQ0FBQztBQUNKLENBQUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL29wZXJhdG9ycy9qb2luQWxsSW50ZXJuYWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZUlucHV0LCBPcGVyYXRvckZ1bmN0aW9uIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmltcG9ydCB7IG1hcE9uZU9yTWFueUFyZ3MgfSBmcm9tICcuLi91dGlsL21hcE9uZU9yTWFueUFyZ3MnO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJy4uL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBtZXJnZU1hcCB9IGZyb20gJy4vbWVyZ2VNYXAnO1xuaW1wb3J0IHsgdG9BcnJheSB9IGZyb20gJy4vdG9BcnJheSc7XG5cbi8qKlxuICogQ29sbGVjdHMgYWxsIG9mIHRoZSBpbm5lciBzb3VyY2VzIGZyb20gc291cmNlIG9ic2VydmFibGUuIFRoZW4sIG9uY2UgdGhlXG4gKiBzb3VyY2UgY29tcGxldGVzLCBqb2lucyB0aGUgdmFsdWVzIHVzaW5nIHRoZSBnaXZlbiBzdGF0aWMuXG4gKlxuICogVGhpcyBpcyB1c2VkIGZvciB7QGxpbmsgY29tYmluZUxhdGVzdEFsbH0gYW5kIHtAbGluayB6aXBBbGx9IHdoaWNoIGJvdGggaGF2ZSB0aGVcbiAqIHNhbWUgYmVoYXZpb3Igb2YgY29sbGVjdGluZyBhbGwgaW5uZXIgb2JzZXJ2YWJsZXMsIHRoZW4gb3BlcmF0aW5nIG9uIHRoZW0uXG4gKlxuICogQHBhcmFtIGpvaW5GbiBUaGUgdHlwZSBvZiBzdGF0aWMgam9pbiB0byBhcHBseSB0byB0aGUgc291cmNlcyBjb2xsZWN0ZWRcbiAqIEBwYXJhbSBwcm9qZWN0IFRoZSBwcm9qZWN0aW9uIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIHRoZSB2YWx1ZXMsIGlmIGFueVxuICovXG5leHBvcnQgZnVuY3Rpb24gam9pbkFsbEludGVybmFsczxULCBSPihqb2luRm46IChzb3VyY2VzOiBPYnNlcnZhYmxlSW5wdXQ8VD5bXSkgPT4gT2JzZXJ2YWJsZTxUPiwgcHJvamVjdD86ICguLi5hcmdzOiBhbnlbXSkgPT4gUikge1xuICByZXR1cm4gcGlwZShcbiAgICAvLyBDb2xsZWN0IGFsbCBpbm5lciBzb3VyY2VzIGludG8gYW4gYXJyYXksIGFuZCBlbWl0IHRoZW0gd2hlbiB0aGVcbiAgICAvLyBzb3VyY2UgY29tcGxldGVzLlxuICAgIHRvQXJyYXkoKSBhcyBPcGVyYXRvckZ1bmN0aW9uPE9ic2VydmFibGVJbnB1dDxUPiwgT2JzZXJ2YWJsZUlucHV0PFQ+W10+LFxuICAgIC8vIFJ1biB0aGUgam9pbiBmdW5jdGlvbiBvbiB0aGUgY29sbGVjdGVkIGFycmF5IG9mIGlubmVyIHNvdXJjZXMuXG4gICAgbWVyZ2VNYXAoKHNvdXJjZXMpID0+IGpvaW5Gbihzb3VyY2VzKSksXG4gICAgLy8gSWYgYSBwcm9qZWN0aW9uIGZ1bmN0aW9uIHdhcyBzdXBwbGllZCwgYXBwbHkgaXQgdG8gZWFjaCByZXN1bHQuXG4gICAgcHJvamVjdCA/IG1hcE9uZU9yTWFueUFyZ3MocHJvamVjdCkgOiAoaWRlbnRpdHkgYXMgYW55KVxuICApO1xufVxuIl19
