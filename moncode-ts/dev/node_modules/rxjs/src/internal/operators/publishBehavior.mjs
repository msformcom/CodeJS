import { BehaviorSubject } from '../BehaviorSubject.mjs';
import { ConnectableObservable } from '../observable/ConnectableObservable.mjs';
/**
 * Creates a {@link ConnectableObservable} that utilizes a {@link BehaviorSubject}.
 *
 * @param initialValue The initial value passed to the {@link BehaviorSubject}.
 * @return A function that returns a {@link ConnectableObservable}
 * @deprecated Will be removed in v8. To create a connectable observable that uses a
 * {@link BehaviorSubject} under the hood, use {@link connectable}.
 * `source.pipe(publishBehavior(initValue))` is equivalent to
 * `connectable(source, { connector: () => new BehaviorSubject(initValue), resetOnDisconnect: false })`.
 * If you're using {@link refCount} after `publishBehavior`, use the {@link share} operator instead.
 * `source.pipe(publishBehavior(initValue), refCount())` is equivalent to
 * `source.pipe(share({ connector: () => new BehaviorSubject(initValue), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false  }))`.
 * Details: https://rxjs.dev/deprecations/multicasting
 */
export function publishBehavior(initialValue) {
    // Note that this has *never* supported the selector function.
    return (source) => {
        const subject = new BehaviorSubject(initialValue);
        return new ConnectableObservable(source, () => subject);
    };
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaEJlaGF2aW9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUc1RTs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBSSxZQUFlO0lBQ2hELDhEQUE4RDtJQUM5RCxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDaEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxlQUFlLENBQUksWUFBWSxDQUFDLENBQUM7UUFDckQsT0FBTyxJQUFJLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUM7QUFDSixDQUFDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaEJlaGF2aW9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAnLi4vQmVoYXZpb3JTdWJqZWN0JztcbmltcG9ydCB7IENvbm5lY3RhYmxlT2JzZXJ2YWJsZSB9IGZyb20gJy4uL29ic2VydmFibGUvQ29ubmVjdGFibGVPYnNlcnZhYmxlJztcbmltcG9ydCB7IFVuYXJ5RnVuY3Rpb24gfSBmcm9tICcuLi90eXBlcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBDb25uZWN0YWJsZU9ic2VydmFibGV9IHRoYXQgdXRpbGl6ZXMgYSB7QGxpbmsgQmVoYXZpb3JTdWJqZWN0fS5cbiAqXG4gKiBAcGFyYW0gaW5pdGlhbFZhbHVlIFRoZSBpbml0aWFsIHZhbHVlIHBhc3NlZCB0byB0aGUge0BsaW5rIEJlaGF2aW9yU3ViamVjdH0uXG4gKiBAcmV0dXJuIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEge0BsaW5rIENvbm5lY3RhYmxlT2JzZXJ2YWJsZX1cbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC4gVG8gY3JlYXRlIGEgY29ubmVjdGFibGUgb2JzZXJ2YWJsZSB0aGF0IHVzZXMgYVxuICoge0BsaW5rIEJlaGF2aW9yU3ViamVjdH0gdW5kZXIgdGhlIGhvb2QsIHVzZSB7QGxpbmsgY29ubmVjdGFibGV9LlxuICogYHNvdXJjZS5waXBlKHB1Ymxpc2hCZWhhdmlvcihpbml0VmFsdWUpKWAgaXMgZXF1aXZhbGVudCB0b1xuICogYGNvbm5lY3RhYmxlKHNvdXJjZSwgeyBjb25uZWN0b3I6ICgpID0+IG5ldyBCZWhhdmlvclN1YmplY3QoaW5pdFZhbHVlKSwgcmVzZXRPbkRpc2Nvbm5lY3Q6IGZhbHNlIH0pYC5cbiAqIElmIHlvdSdyZSB1c2luZyB7QGxpbmsgcmVmQ291bnR9IGFmdGVyIGBwdWJsaXNoQmVoYXZpb3JgLCB1c2UgdGhlIHtAbGluayBzaGFyZX0gb3BlcmF0b3IgaW5zdGVhZC5cbiAqIGBzb3VyY2UucGlwZShwdWJsaXNoQmVoYXZpb3IoaW5pdFZhbHVlKSwgcmVmQ291bnQoKSlgIGlzIGVxdWl2YWxlbnQgdG9cbiAqIGBzb3VyY2UucGlwZShzaGFyZSh7IGNvbm5lY3RvcjogKCkgPT4gbmV3IEJlaGF2aW9yU3ViamVjdChpbml0VmFsdWUpLCByZXNldE9uRXJyb3I6IGZhbHNlLCByZXNldE9uQ29tcGxldGU6IGZhbHNlLCByZXNldE9uUmVmQ291bnRaZXJvOiBmYWxzZSAgfSkpYC5cbiAqIERldGFpbHM6IGh0dHBzOi8vcnhqcy5kZXYvZGVwcmVjYXRpb25zL211bHRpY2FzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaEJlaGF2aW9yPFQ+KGluaXRpYWxWYWx1ZTogVCk6IFVuYXJ5RnVuY3Rpb248T2JzZXJ2YWJsZTxUPiwgQ29ubmVjdGFibGVPYnNlcnZhYmxlPFQ+PiB7XG4gIC8vIE5vdGUgdGhhdCB0aGlzIGhhcyAqbmV2ZXIqIHN1cHBvcnRlZCB0aGUgc2VsZWN0b3IgZnVuY3Rpb24uXG4gIHJldHVybiAoc291cmNlKSA9PiB7XG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8VD4oaW5pdGlhbFZhbHVlKTtcbiAgICByZXR1cm4gbmV3IENvbm5lY3RhYmxlT2JzZXJ2YWJsZShzb3VyY2UsICgpID0+IHN1YmplY3QpO1xuICB9O1xufVxuIl19
