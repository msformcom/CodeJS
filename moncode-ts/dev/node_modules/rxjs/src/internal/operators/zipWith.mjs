import { zip } from './zip.mjs';
/**
 * Subscribes to the source, and the observable inputs provided as arguments, and combines their values, by index, into arrays.
 *
 * What is meant by "combine by index": The first value from each will be made into a single array, then emitted,
 * then the second value from each will be combined into a single array and emitted, then the third value
 * from each will be combined into a single array and emitted, and so on.
 *
 * This will continue until it is no longer able to combine values of the same index into an array.
 *
 * After the last value from any one completed source is emitted in an array, the resulting observable will complete,
 * as there is no way to continue "zipping" values together by index.
 *
 * Use-cases for this operator are limited. There are memory concerns if one of the streams is emitting
 * values at a much faster rate than the others. Usage should likely be limited to streams that emit
 * at a similar pace, or finite streams of known length.
 *
 * In many cases, authors want `combineLatestWith` and not `zipWith`.
 *
 * @param otherInputs other observable inputs to collate values from.
 * @return A function that returns an Observable that emits items by index
 * combined from the source Observable and provided Observables, in form of an
 * array.
 */
export function zipWith(...otherInputs) {
    return zip(...otherInputs);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvemlwV2l0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRTVCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JHO0FBQ0gsTUFBTSxVQUFVLE9BQU8sQ0FBa0MsR0FBRyxXQUF5QztJQUNuRyxPQUFPLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDO0FBQzdCLENBQUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL29wZXJhdG9ycy96aXBXaXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZUlucHV0VHVwbGUsIE9wZXJhdG9yRnVuY3Rpb24sIENvbnMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyB6aXAgfSBmcm9tICcuL3ppcCc7XG5cbi8qKlxuICogU3Vic2NyaWJlcyB0byB0aGUgc291cmNlLCBhbmQgdGhlIG9ic2VydmFibGUgaW5wdXRzIHByb3ZpZGVkIGFzIGFyZ3VtZW50cywgYW5kIGNvbWJpbmVzIHRoZWlyIHZhbHVlcywgYnkgaW5kZXgsIGludG8gYXJyYXlzLlxuICpcbiAqIFdoYXQgaXMgbWVhbnQgYnkgXCJjb21iaW5lIGJ5IGluZGV4XCI6IFRoZSBmaXJzdCB2YWx1ZSBmcm9tIGVhY2ggd2lsbCBiZSBtYWRlIGludG8gYSBzaW5nbGUgYXJyYXksIHRoZW4gZW1pdHRlZCxcbiAqIHRoZW4gdGhlIHNlY29uZCB2YWx1ZSBmcm9tIGVhY2ggd2lsbCBiZSBjb21iaW5lZCBpbnRvIGEgc2luZ2xlIGFycmF5IGFuZCBlbWl0dGVkLCB0aGVuIHRoZSB0aGlyZCB2YWx1ZVxuICogZnJvbSBlYWNoIHdpbGwgYmUgY29tYmluZWQgaW50byBhIHNpbmdsZSBhcnJheSBhbmQgZW1pdHRlZCwgYW5kIHNvIG9uLlxuICpcbiAqIFRoaXMgd2lsbCBjb250aW51ZSB1bnRpbCBpdCBpcyBubyBsb25nZXIgYWJsZSB0byBjb21iaW5lIHZhbHVlcyBvZiB0aGUgc2FtZSBpbmRleCBpbnRvIGFuIGFycmF5LlxuICpcbiAqIEFmdGVyIHRoZSBsYXN0IHZhbHVlIGZyb20gYW55IG9uZSBjb21wbGV0ZWQgc291cmNlIGlzIGVtaXR0ZWQgaW4gYW4gYXJyYXksIHRoZSByZXN1bHRpbmcgb2JzZXJ2YWJsZSB3aWxsIGNvbXBsZXRlLFxuICogYXMgdGhlcmUgaXMgbm8gd2F5IHRvIGNvbnRpbnVlIFwiemlwcGluZ1wiIHZhbHVlcyB0b2dldGhlciBieSBpbmRleC5cbiAqXG4gKiBVc2UtY2FzZXMgZm9yIHRoaXMgb3BlcmF0b3IgYXJlIGxpbWl0ZWQuIFRoZXJlIGFyZSBtZW1vcnkgY29uY2VybnMgaWYgb25lIG9mIHRoZSBzdHJlYW1zIGlzIGVtaXR0aW5nXG4gKiB2YWx1ZXMgYXQgYSBtdWNoIGZhc3RlciByYXRlIHRoYW4gdGhlIG90aGVycy4gVXNhZ2Ugc2hvdWxkIGxpa2VseSBiZSBsaW1pdGVkIHRvIHN0cmVhbXMgdGhhdCBlbWl0XG4gKiBhdCBhIHNpbWlsYXIgcGFjZSwgb3IgZmluaXRlIHN0cmVhbXMgb2Yga25vd24gbGVuZ3RoLlxuICpcbiAqIEluIG1hbnkgY2FzZXMsIGF1dGhvcnMgd2FudCBgY29tYmluZUxhdGVzdFdpdGhgIGFuZCBub3QgYHppcFdpdGhgLlxuICpcbiAqIEBwYXJhbSBvdGhlcklucHV0cyBvdGhlciBvYnNlcnZhYmxlIGlucHV0cyB0byBjb2xsYXRlIHZhbHVlcyBmcm9tLlxuICogQHJldHVybiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgaXRlbXMgYnkgaW5kZXhcbiAqIGNvbWJpbmVkIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGFuZCBwcm92aWRlZCBPYnNlcnZhYmxlcywgaW4gZm9ybSBvZiBhblxuICogYXJyYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB6aXBXaXRoPFQsIEEgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10+KC4uLm90aGVySW5wdXRzOiBbLi4uT2JzZXJ2YWJsZUlucHV0VHVwbGU8QT5dKTogT3BlcmF0b3JGdW5jdGlvbjxULCBDb25zPFQsIEE+PiB7XG4gIHJldHVybiB6aXAoLi4ub3RoZXJJbnB1dHMpO1xufVxuIl19
