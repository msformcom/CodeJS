import { merge } from './merge.mjs';
/**
 * Merge the values from all observables to a single observable result.
 *
 * Creates an observable, that when subscribed to, subscribes to the source
 * observable, and all other sources provided as arguments. All values from
 * every source are emitted from the resulting subscription.
 *
 * When all sources complete, the resulting observable will complete.
 *
 * When any source errors, the resulting observable will error.
 *
 * ## Example
 *
 * Joining all outputs from multiple user input event streams
 *
 * ```ts
 * import { fromEvent, map, mergeWith } from 'rxjs';
 *
 * const clicks$ = fromEvent(document, 'click').pipe(map(() => 'click'));
 * const mousemoves$ = fromEvent(document, 'mousemove').pipe(map(() => 'mousemove'));
 * const dblclicks$ = fromEvent(document, 'dblclick').pipe(map(() => 'dblclick'));
 *
 * mousemoves$
 *   .pipe(mergeWith(clicks$, dblclicks$))
 *   .subscribe(x => console.log(x));
 *
 * // result (assuming user interactions)
 * // 'mousemove'
 * // 'mousemove'
 * // 'mousemove'
 * // 'click'
 * // 'click'
 * // 'dblclick'
 * ```
 *
 * @see {@link merge}
 *
 * @param otherSources the sources to combine the current source with.
 * @return A function that returns an Observable that merges the values from
 * all given Observables.
 */
export function mergeWith(...otherSources) {
    return merge(...otherSources);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VXaXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFaEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3Q0c7QUFDSCxNQUFNLFVBQVUsU0FBUyxDQUN2QixHQUFHLFlBQTBDO0lBRTdDLE9BQU8sS0FBSyxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUM7QUFDaEMsQ0FBQyIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlV2l0aC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGVJbnB1dFR1cGxlLCBPcGVyYXRvckZ1bmN0aW9uIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICcuL21lcmdlJztcblxuLyoqXG4gKiBNZXJnZSB0aGUgdmFsdWVzIGZyb20gYWxsIG9ic2VydmFibGVzIHRvIGEgc2luZ2xlIG9ic2VydmFibGUgcmVzdWx0LlxuICpcbiAqIENyZWF0ZXMgYW4gb2JzZXJ2YWJsZSwgdGhhdCB3aGVuIHN1YnNjcmliZWQgdG8sIHN1YnNjcmliZXMgdG8gdGhlIHNvdXJjZVxuICogb2JzZXJ2YWJsZSwgYW5kIGFsbCBvdGhlciBzb3VyY2VzIHByb3ZpZGVkIGFzIGFyZ3VtZW50cy4gQWxsIHZhbHVlcyBmcm9tXG4gKiBldmVyeSBzb3VyY2UgYXJlIGVtaXR0ZWQgZnJvbSB0aGUgcmVzdWx0aW5nIHN1YnNjcmlwdGlvbi5cbiAqXG4gKiBXaGVuIGFsbCBzb3VyY2VzIGNvbXBsZXRlLCB0aGUgcmVzdWx0aW5nIG9ic2VydmFibGUgd2lsbCBjb21wbGV0ZS5cbiAqXG4gKiBXaGVuIGFueSBzb3VyY2UgZXJyb3JzLCB0aGUgcmVzdWx0aW5nIG9ic2VydmFibGUgd2lsbCBlcnJvci5cbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogSm9pbmluZyBhbGwgb3V0cHV0cyBmcm9tIG11bHRpcGxlIHVzZXIgaW5wdXQgZXZlbnQgc3RyZWFtc1xuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBmcm9tRXZlbnQsIG1hcCwgbWVyZ2VXaXRoIH0gZnJvbSAncnhqcyc7XG4gKlxuICogY29uc3QgY2xpY2tzJCA9IGZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJykucGlwZShtYXAoKCkgPT4gJ2NsaWNrJykpO1xuICogY29uc3QgbW91c2Vtb3ZlcyQgPSBmcm9tRXZlbnQoZG9jdW1lbnQsICdtb3VzZW1vdmUnKS5waXBlKG1hcCgoKSA9PiAnbW91c2Vtb3ZlJykpO1xuICogY29uc3QgZGJsY2xpY2tzJCA9IGZyb21FdmVudChkb2N1bWVudCwgJ2RibGNsaWNrJykucGlwZShtYXAoKCkgPT4gJ2RibGNsaWNrJykpO1xuICpcbiAqIG1vdXNlbW92ZXMkXG4gKiAgIC5waXBlKG1lcmdlV2l0aChjbGlja3MkLCBkYmxjbGlja3MkKSlcbiAqICAgLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiAvLyByZXN1bHQgKGFzc3VtaW5nIHVzZXIgaW50ZXJhY3Rpb25zKVxuICogLy8gJ21vdXNlbW92ZSdcbiAqIC8vICdtb3VzZW1vdmUnXG4gKiAvLyAnbW91c2Vtb3ZlJ1xuICogLy8gJ2NsaWNrJ1xuICogLy8gJ2NsaWNrJ1xuICogLy8gJ2RibGNsaWNrJ1xuICogYGBgXG4gKlxuICogQHNlZSB7QGxpbmsgbWVyZ2V9XG4gKlxuICogQHBhcmFtIG90aGVyU291cmNlcyB0aGUgc291cmNlcyB0byBjb21iaW5lIHRoZSBjdXJyZW50IHNvdXJjZSB3aXRoLlxuICogQHJldHVybiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbWVyZ2VzIHRoZSB2YWx1ZXMgZnJvbVxuICogYWxsIGdpdmVuIE9ic2VydmFibGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VXaXRoPFQsIEEgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10+KFxuICAuLi5vdGhlclNvdXJjZXM6IFsuLi5PYnNlcnZhYmxlSW5wdXRUdXBsZTxBPl1cbik6IE9wZXJhdG9yRnVuY3Rpb248VCwgVCB8IEFbbnVtYmVyXT4ge1xuICByZXR1cm4gbWVyZ2UoLi4ub3RoZXJTb3VyY2VzKTtcbn1cbiJdfQ==
