import { AsyncSubject } from '../AsyncSubject.mjs';
import { ConnectableObservable } from '../observable/ConnectableObservable.mjs';
/**
 * Returns a connectable observable sequence that shares a single subscription to the
 * underlying sequence containing only the last notification.
 *
 * ![](publishLast.png)
 *
 * Similar to {@link publish}, but it waits until the source observable completes and stores
 * the last emitted value.
 * Similarly to {@link publishReplay} and {@link publishBehavior}, this keeps storing the last
 * value even if it has no more subscribers. If subsequent subscriptions happen, they will
 * immediately get that last stored value and complete.
 *
 * ## Example
 *
 * ```ts
 * import { ConnectableObservable, interval, publishLast, tap, take } from 'rxjs';
 *
 * const connectable = <ConnectableObservable<number>>interval(1000)
 *   .pipe(
 *     tap(x => console.log('side effect', x)),
 *     take(3),
 *     publishLast()
 *   );
 *
 * connectable.subscribe({
 *   next: x => console.log('Sub. A', x),
 *   error: err => console.log('Sub. A Error', err),
 *   complete: () => console.log('Sub. A Complete')
 * });
 *
 * connectable.subscribe({
 *   next: x => console.log('Sub. B', x),
 *   error: err => console.log('Sub. B Error', err),
 *   complete: () => console.log('Sub. B Complete')
 * });
 *
 * connectable.connect();
 *
 * // Results:
 * // 'side effect 0'   - after one second
 * // 'side effect 1'   - after two seconds
 * // 'side effect 2'   - after three seconds
 * // 'Sub. A 2'        - immediately after 'side effect 2'
 * // 'Sub. B 2'
 * // 'Sub. A Complete'
 * // 'Sub. B Complete'
 * ```
 *
 * @see {@link ConnectableObservable}
 * @see {@link publish}
 * @see {@link publishReplay}
 * @see {@link publishBehavior}
 *
 * @return A function that returns an Observable that emits elements of a
 * sequence produced by multicasting the source sequence.
 * @deprecated Will be removed in v8. To create a connectable observable with an
 * {@link AsyncSubject} under the hood, use {@link connectable}.
 * `source.pipe(publishLast())` is equivalent to
 * `connectable(source, { connector: () => new AsyncSubject(), resetOnDisconnect: false })`.
 * If you're using {@link refCount} after `publishLast`, use the {@link share} operator instead.
 * `source.pipe(publishLast(), refCount())` is equivalent to
 * `source.pipe(share({ connector: () => new AsyncSubject(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.
 * Details: https://rxjs.dev/deprecations/multicasting
 */
export function publishLast() {
    // Note that this has *never* supported a selector function like `publish` and `publishReplay`.
    return (source) => {
        const subject = new AsyncSubject();
        return new ConnectableObservable(source, () => subject);
    };
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaExhc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRzVFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0ErREc7QUFDSCxNQUFNLFVBQVUsV0FBVztJQUN6QiwrRkFBK0Y7SUFDL0YsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ2hCLE1BQU0sT0FBTyxHQUFHLElBQUksWUFBWSxFQUFLLENBQUM7UUFDdEMsT0FBTyxJQUFJLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUM7QUFDSixDQUFDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaExhc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBBc3luY1N1YmplY3QgfSBmcm9tICcuLi9Bc3luY1N1YmplY3QnO1xuaW1wb3J0IHsgQ29ubmVjdGFibGVPYnNlcnZhYmxlIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGUnO1xuaW1wb3J0IHsgVW5hcnlGdW5jdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcblxuLyoqXG4gKiBSZXR1cm5zIGEgY29ubmVjdGFibGUgb2JzZXJ2YWJsZSBzZXF1ZW5jZSB0aGF0IHNoYXJlcyBhIHNpbmdsZSBzdWJzY3JpcHRpb24gdG8gdGhlXG4gKiB1bmRlcmx5aW5nIHNlcXVlbmNlIGNvbnRhaW5pbmcgb25seSB0aGUgbGFzdCBub3RpZmljYXRpb24uXG4gKlxuICogIVtdKHB1Ymxpc2hMYXN0LnBuZylcbiAqXG4gKiBTaW1pbGFyIHRvIHtAbGluayBwdWJsaXNofSwgYnV0IGl0IHdhaXRzIHVudGlsIHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZSBjb21wbGV0ZXMgYW5kIHN0b3Jlc1xuICogdGhlIGxhc3QgZW1pdHRlZCB2YWx1ZS5cbiAqIFNpbWlsYXJseSB0byB7QGxpbmsgcHVibGlzaFJlcGxheX0gYW5kIHtAbGluayBwdWJsaXNoQmVoYXZpb3J9LCB0aGlzIGtlZXBzIHN0b3JpbmcgdGhlIGxhc3RcbiAqIHZhbHVlIGV2ZW4gaWYgaXQgaGFzIG5vIG1vcmUgc3Vic2NyaWJlcnMuIElmIHN1YnNlcXVlbnQgc3Vic2NyaXB0aW9ucyBoYXBwZW4sIHRoZXkgd2lsbFxuICogaW1tZWRpYXRlbHkgZ2V0IHRoYXQgbGFzdCBzdG9yZWQgdmFsdWUgYW5kIGNvbXBsZXRlLlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgQ29ubmVjdGFibGVPYnNlcnZhYmxlLCBpbnRlcnZhbCwgcHVibGlzaExhc3QsIHRhcCwgdGFrZSB9IGZyb20gJ3J4anMnO1xuICpcbiAqIGNvbnN0IGNvbm5lY3RhYmxlID0gPENvbm5lY3RhYmxlT2JzZXJ2YWJsZTxudW1iZXI+PmludGVydmFsKDEwMDApXG4gKiAgIC5waXBlKFxuICogICAgIHRhcCh4ID0+IGNvbnNvbGUubG9nKCdzaWRlIGVmZmVjdCcsIHgpKSxcbiAqICAgICB0YWtlKDMpLFxuICogICAgIHB1Ymxpc2hMYXN0KClcbiAqICAgKTtcbiAqXG4gKiBjb25uZWN0YWJsZS5zdWJzY3JpYmUoe1xuICogICBuZXh0OiB4ID0+IGNvbnNvbGUubG9nKCdTdWIuIEEnLCB4KSxcbiAqICAgZXJyb3I6IGVyciA9PiBjb25zb2xlLmxvZygnU3ViLiBBIEVycm9yJywgZXJyKSxcbiAqICAgY29tcGxldGU6ICgpID0+IGNvbnNvbGUubG9nKCdTdWIuIEEgQ29tcGxldGUnKVxuICogfSk7XG4gKlxuICogY29ubmVjdGFibGUuc3Vic2NyaWJlKHtcbiAqICAgbmV4dDogeCA9PiBjb25zb2xlLmxvZygnU3ViLiBCJywgeCksXG4gKiAgIGVycm9yOiBlcnIgPT4gY29uc29sZS5sb2coJ1N1Yi4gQiBFcnJvcicsIGVyciksXG4gKiAgIGNvbXBsZXRlOiAoKSA9PiBjb25zb2xlLmxvZygnU3ViLiBCIENvbXBsZXRlJylcbiAqIH0pO1xuICpcbiAqIGNvbm5lY3RhYmxlLmNvbm5lY3QoKTtcbiAqXG4gKiAvLyBSZXN1bHRzOlxuICogLy8gJ3NpZGUgZWZmZWN0IDAnICAgLSBhZnRlciBvbmUgc2Vjb25kXG4gKiAvLyAnc2lkZSBlZmZlY3QgMScgICAtIGFmdGVyIHR3byBzZWNvbmRzXG4gKiAvLyAnc2lkZSBlZmZlY3QgMicgICAtIGFmdGVyIHRocmVlIHNlY29uZHNcbiAqIC8vICdTdWIuIEEgMicgICAgICAgIC0gaW1tZWRpYXRlbHkgYWZ0ZXIgJ3NpZGUgZWZmZWN0IDInXG4gKiAvLyAnU3ViLiBCIDInXG4gKiAvLyAnU3ViLiBBIENvbXBsZXRlJ1xuICogLy8gJ1N1Yi4gQiBDb21wbGV0ZSdcbiAqIGBgYFxuICpcbiAqIEBzZWUge0BsaW5rIENvbm5lY3RhYmxlT2JzZXJ2YWJsZX1cbiAqIEBzZWUge0BsaW5rIHB1Ymxpc2h9XG4gKiBAc2VlIHtAbGluayBwdWJsaXNoUmVwbGF5fVxuICogQHNlZSB7QGxpbmsgcHVibGlzaEJlaGF2aW9yfVxuICpcbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGVsZW1lbnRzIG9mIGFcbiAqIHNlcXVlbmNlIHByb2R1Y2VkIGJ5IG11bHRpY2FzdGluZyB0aGUgc291cmNlIHNlcXVlbmNlLlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY4LiBUbyBjcmVhdGUgYSBjb25uZWN0YWJsZSBvYnNlcnZhYmxlIHdpdGggYW5cbiAqIHtAbGluayBBc3luY1N1YmplY3R9IHVuZGVyIHRoZSBob29kLCB1c2Uge0BsaW5rIGNvbm5lY3RhYmxlfS5cbiAqIGBzb3VyY2UucGlwZShwdWJsaXNoTGFzdCgpKWAgaXMgZXF1aXZhbGVudCB0b1xuICogYGNvbm5lY3RhYmxlKHNvdXJjZSwgeyBjb25uZWN0b3I6ICgpID0+IG5ldyBBc3luY1N1YmplY3QoKSwgcmVzZXRPbkRpc2Nvbm5lY3Q6IGZhbHNlIH0pYC5cbiAqIElmIHlvdSdyZSB1c2luZyB7QGxpbmsgcmVmQ291bnR9IGFmdGVyIGBwdWJsaXNoTGFzdGAsIHVzZSB0aGUge0BsaW5rIHNoYXJlfSBvcGVyYXRvciBpbnN0ZWFkLlxuICogYHNvdXJjZS5waXBlKHB1Ymxpc2hMYXN0KCksIHJlZkNvdW50KCkpYCBpcyBlcXVpdmFsZW50IHRvXG4gKiBgc291cmNlLnBpcGUoc2hhcmUoeyBjb25uZWN0b3I6ICgpID0+IG5ldyBBc3luY1N1YmplY3QoKSwgcmVzZXRPbkVycm9yOiBmYWxzZSwgcmVzZXRPbkNvbXBsZXRlOiBmYWxzZSwgcmVzZXRPblJlZkNvdW50WmVybzogZmFsc2UgfSkpYC5cbiAqIERldGFpbHM6IGh0dHBzOi8vcnhqcy5kZXYvZGVwcmVjYXRpb25zL211bHRpY2FzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaExhc3Q8VD4oKTogVW5hcnlGdW5jdGlvbjxPYnNlcnZhYmxlPFQ+LCBDb25uZWN0YWJsZU9ic2VydmFibGU8VD4+IHtcbiAgLy8gTm90ZSB0aGF0IHRoaXMgaGFzICpuZXZlciogc3VwcG9ydGVkIGEgc2VsZWN0b3IgZnVuY3Rpb24gbGlrZSBgcHVibGlzaGAgYW5kIGBwdWJsaXNoUmVwbGF5YC5cbiAgcmV0dXJuIChzb3VyY2UpID0+IHtcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IEFzeW5jU3ViamVjdDxUPigpO1xuICAgIHJldHVybiBuZXcgQ29ubmVjdGFibGVPYnNlcnZhYmxlKHNvdXJjZSwgKCkgPT4gc3ViamVjdCk7XG4gIH07XG59XG4iXX0=
