import { operate } from '../util/lift.mjs';
import { noop } from '../util/noop.mjs';
import { createOperatorSubscriber } from './OperatorSubscriber.mjs';
import { innerFrom } from '../observable/innerFrom.mjs';
/**
 * Buffers the source Observable values, using a factory function of closing
 * Observables to determine when to close, emit, and reset the buffer.
 *
 * <span class="informal">Collects values from the past as an array. When it
 * starts collecting values, it calls a function that returns an Observable that
 * tells when to close the buffer and restart collecting.</span>
 *
 * ![](bufferWhen.svg)
 *
 * Opens a buffer immediately, then closes the buffer when the observable
 * returned by calling `closingSelector` function emits a value. When it closes
 * the buffer, it immediately opens a new buffer and repeats the process.
 *
 * ## Example
 *
 * Emit an array of the last clicks every [1-5] random seconds
 *
 * ```ts
 * import { fromEvent, bufferWhen, interval } from 'rxjs';
 *
 * const clicks = fromEvent(document, 'click');
 * const buffered = clicks.pipe(
 *   bufferWhen(() => interval(1000 + Math.random() * 4000))
 * );
 * buffered.subscribe(x => console.log(x));
 * ```
 *
 * @see {@link buffer}
 * @see {@link bufferCount}
 * @see {@link bufferTime}
 * @see {@link bufferToggle}
 * @see {@link windowWhen}
 *
 * @param {function(): Observable} closingSelector A function that takes no
 * arguments and returns an Observable that signals buffer closure.
 * @return A function that returns an Observable of arrays of buffered values.
 */
export function bufferWhen(closingSelector) {
    return operate((source, subscriber) => {
        // The buffer we keep and emit.
        let buffer = null;
        // A reference to the subscriber used to subscribe to
        // the closing notifier. We need to hold this so we can
        // end the subscription after the first notification.
        let closingSubscriber = null;
        // Ends the previous closing notifier subscription, so it
        // terminates after the first emission, then emits
        // the current buffer  if there is one, starts a new buffer, and starts a
        // new closing notifier.
        const openBuffer = () => {
            // Make sure to finalize the closing subscription, we only cared
            // about one notification.
            closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
            // emit the buffer if we have one, and start a new buffer.
            const b = buffer;
            buffer = [];
            b && subscriber.next(b);
            // Get a new closing notifier and subscribe to it.
            innerFrom(closingSelector()).subscribe((closingSubscriber = createOperatorSubscriber(subscriber, openBuffer, noop)));
        };
        // Start the first buffer.
        openBuffer();
        // Subscribe to our source.
        source.subscribe(createOperatorSubscriber(subscriber, 
        // Add every new value to the current buffer.
        (value) => buffer === null || buffer === void 0 ? void 0 : buffer.push(value), 
        // When we complete, emit the buffer if we have one,
        // then complete the result.
        () => {
            buffer && subscriber.next(buffer);
            subscriber.complete();
        }, 
        // Pass all errors through to consumer.
        undefined, 
        // Release memory on finalization
        () => (buffer = closingSubscriber = null)));
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyV2hlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDcEMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUNHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBSSxlQUEyQztJQUN2RSxPQUFPLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRTtRQUNwQywrQkFBK0I7UUFDL0IsSUFBSSxNQUFNLEdBQWUsSUFBSSxDQUFDO1FBQzlCLHFEQUFxRDtRQUNyRCx1REFBdUQ7UUFDdkQscURBQXFEO1FBQ3JELElBQUksaUJBQWlCLEdBQXlCLElBQUksQ0FBQztRQUVuRCx5REFBeUQ7UUFDekQsa0RBQWtEO1FBQ2xELHlFQUF5RTtRQUN6RSx3QkFBd0I7UUFDeEIsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFO1lBQ3RCLGdFQUFnRTtZQUNoRSwwQkFBMEI7WUFDMUIsaUJBQWlCLGFBQWpCLGlCQUFpQix1QkFBakIsaUJBQWlCLENBQUUsV0FBVyxFQUFFLENBQUM7WUFDakMsMERBQTBEO1lBQzFELE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQztZQUNqQixNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ1osQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFeEIsa0RBQWtEO1lBQ2xELFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLHdCQUF3QixDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZILENBQUMsQ0FBQztRQUVGLDBCQUEwQjtRQUMxQixVQUFVLEVBQUUsQ0FBQztRQUViLDJCQUEyQjtRQUMzQixNQUFNLENBQUMsU0FBUyxDQUNkLHdCQUF3QixDQUN0QixVQUFVO1FBQ1YsNkNBQTZDO1FBQzdDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM5QixvREFBb0Q7UUFDcEQsNEJBQTRCO1FBQzVCLEdBQUcsRUFBRTtZQUNILE1BQU0sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2xDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QixDQUFDO1FBQ0QsdUNBQXVDO1FBQ3ZDLFNBQVM7UUFDVCxpQ0FBaUM7UUFDakMsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUcsaUJBQWlCLEdBQUcsSUFBSyxDQUFDLENBQzNDLENBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlcldoZW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlSW5wdXQsIE9wZXJhdG9yRnVuY3Rpb24gfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuLi91dGlsL25vb3AnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuXG4vKipcbiAqIEJ1ZmZlcnMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHZhbHVlcywgdXNpbmcgYSBmYWN0b3J5IGZ1bmN0aW9uIG9mIGNsb3NpbmdcbiAqIE9ic2VydmFibGVzIHRvIGRldGVybWluZSB3aGVuIHRvIGNsb3NlLCBlbWl0LCBhbmQgcmVzZXQgdGhlIGJ1ZmZlci5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+Q29sbGVjdHMgdmFsdWVzIGZyb20gdGhlIHBhc3QgYXMgYW4gYXJyYXkuIFdoZW4gaXRcbiAqIHN0YXJ0cyBjb2xsZWN0aW5nIHZhbHVlcywgaXQgY2FsbHMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0XG4gKiB0ZWxscyB3aGVuIHRvIGNsb3NlIHRoZSBidWZmZXIgYW5kIHJlc3RhcnQgY29sbGVjdGluZy48L3NwYW4+XG4gKlxuICogIVtdKGJ1ZmZlcldoZW4uc3ZnKVxuICpcbiAqIE9wZW5zIGEgYnVmZmVyIGltbWVkaWF0ZWx5LCB0aGVuIGNsb3NlcyB0aGUgYnVmZmVyIHdoZW4gdGhlIG9ic2VydmFibGVcbiAqIHJldHVybmVkIGJ5IGNhbGxpbmcgYGNsb3NpbmdTZWxlY3RvcmAgZnVuY3Rpb24gZW1pdHMgYSB2YWx1ZS4gV2hlbiBpdCBjbG9zZXNcbiAqIHRoZSBidWZmZXIsIGl0IGltbWVkaWF0ZWx5IG9wZW5zIGEgbmV3IGJ1ZmZlciBhbmQgcmVwZWF0cyB0aGUgcHJvY2Vzcy5cbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogRW1pdCBhbiBhcnJheSBvZiB0aGUgbGFzdCBjbGlja3MgZXZlcnkgWzEtNV0gcmFuZG9tIHNlY29uZHNcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZnJvbUV2ZW50LCBidWZmZXJXaGVuLCBpbnRlcnZhbCB9IGZyb20gJ3J4anMnO1xuICpcbiAqIGNvbnN0IGNsaWNrcyA9IGZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiBjb25zdCBidWZmZXJlZCA9IGNsaWNrcy5waXBlKFxuICogICBidWZmZXJXaGVuKCgpID0+IGludGVydmFsKDEwMDAgKyBNYXRoLnJhbmRvbSgpICogNDAwMCkpXG4gKiApO1xuICogYnVmZmVyZWQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICogYGBgXG4gKlxuICogQHNlZSB7QGxpbmsgYnVmZmVyfVxuICogQHNlZSB7QGxpbmsgYnVmZmVyQ291bnR9XG4gKiBAc2VlIHtAbGluayBidWZmZXJUaW1lfVxuICogQHNlZSB7QGxpbmsgYnVmZmVyVG9nZ2xlfVxuICogQHNlZSB7QGxpbmsgd2luZG93V2hlbn1cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IE9ic2VydmFibGV9IGNsb3NpbmdTZWxlY3RvciBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgbm9cbiAqIGFyZ3VtZW50cyBhbmQgcmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgc2lnbmFscyBidWZmZXIgY2xvc3VyZS5cbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gT2JzZXJ2YWJsZSBvZiBhcnJheXMgb2YgYnVmZmVyZWQgdmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyV2hlbjxUPihjbG9zaW5nU2VsZWN0b3I6ICgpID0+IE9ic2VydmFibGVJbnB1dDxhbnk+KTogT3BlcmF0b3JGdW5jdGlvbjxULCBUW10+IHtcbiAgcmV0dXJuIG9wZXJhdGUoKHNvdXJjZSwgc3Vic2NyaWJlcikgPT4ge1xuICAgIC8vIFRoZSBidWZmZXIgd2Uga2VlcCBhbmQgZW1pdC5cbiAgICBsZXQgYnVmZmVyOiBUW10gfCBudWxsID0gbnVsbDtcbiAgICAvLyBBIHJlZmVyZW5jZSB0byB0aGUgc3Vic2NyaWJlciB1c2VkIHRvIHN1YnNjcmliZSB0b1xuICAgIC8vIHRoZSBjbG9zaW5nIG5vdGlmaWVyLiBXZSBuZWVkIHRvIGhvbGQgdGhpcyBzbyB3ZSBjYW5cbiAgICAvLyBlbmQgdGhlIHN1YnNjcmlwdGlvbiBhZnRlciB0aGUgZmlyc3Qgbm90aWZpY2F0aW9uLlxuICAgIGxldCBjbG9zaW5nU3Vic2NyaWJlcjogU3Vic2NyaWJlcjxUPiB8IG51bGwgPSBudWxsO1xuXG4gICAgLy8gRW5kcyB0aGUgcHJldmlvdXMgY2xvc2luZyBub3RpZmllciBzdWJzY3JpcHRpb24sIHNvIGl0XG4gICAgLy8gdGVybWluYXRlcyBhZnRlciB0aGUgZmlyc3QgZW1pc3Npb24sIHRoZW4gZW1pdHNcbiAgICAvLyB0aGUgY3VycmVudCBidWZmZXIgIGlmIHRoZXJlIGlzIG9uZSwgc3RhcnRzIGEgbmV3IGJ1ZmZlciwgYW5kIHN0YXJ0cyBhXG4gICAgLy8gbmV3IGNsb3Npbmcgbm90aWZpZXIuXG4gICAgY29uc3Qgb3BlbkJ1ZmZlciA9ICgpID0+IHtcbiAgICAgIC8vIE1ha2Ugc3VyZSB0byBmaW5hbGl6ZSB0aGUgY2xvc2luZyBzdWJzY3JpcHRpb24sIHdlIG9ubHkgY2FyZWRcbiAgICAgIC8vIGFib3V0IG9uZSBub3RpZmljYXRpb24uXG4gICAgICBjbG9zaW5nU3Vic2NyaWJlcj8udW5zdWJzY3JpYmUoKTtcbiAgICAgIC8vIGVtaXQgdGhlIGJ1ZmZlciBpZiB3ZSBoYXZlIG9uZSwgYW5kIHN0YXJ0IGEgbmV3IGJ1ZmZlci5cbiAgICAgIGNvbnN0IGIgPSBidWZmZXI7XG4gICAgICBidWZmZXIgPSBbXTtcbiAgICAgIGIgJiYgc3Vic2NyaWJlci5uZXh0KGIpO1xuXG4gICAgICAvLyBHZXQgYSBuZXcgY2xvc2luZyBub3RpZmllciBhbmQgc3Vic2NyaWJlIHRvIGl0LlxuICAgICAgaW5uZXJGcm9tKGNsb3NpbmdTZWxlY3RvcigpKS5zdWJzY3JpYmUoKGNsb3NpbmdTdWJzY3JpYmVyID0gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIG9wZW5CdWZmZXIsIG5vb3ApKSk7XG4gICAgfTtcblxuICAgIC8vIFN0YXJ0IHRoZSBmaXJzdCBidWZmZXIuXG4gICAgb3BlbkJ1ZmZlcigpO1xuXG4gICAgLy8gU3Vic2NyaWJlIHRvIG91ciBzb3VyY2UuXG4gICAgc291cmNlLnN1YnNjcmliZShcbiAgICAgIGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihcbiAgICAgICAgc3Vic2NyaWJlcixcbiAgICAgICAgLy8gQWRkIGV2ZXJ5IG5ldyB2YWx1ZSB0byB0aGUgY3VycmVudCBidWZmZXIuXG4gICAgICAgICh2YWx1ZSkgPT4gYnVmZmVyPy5wdXNoKHZhbHVlKSxcbiAgICAgICAgLy8gV2hlbiB3ZSBjb21wbGV0ZSwgZW1pdCB0aGUgYnVmZmVyIGlmIHdlIGhhdmUgb25lLFxuICAgICAgICAvLyB0aGVuIGNvbXBsZXRlIHRoZSByZXN1bHQuXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBidWZmZXIgJiYgc3Vic2NyaWJlci5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBQYXNzIGFsbCBlcnJvcnMgdGhyb3VnaCB0byBjb25zdW1lci5cbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAvLyBSZWxlYXNlIG1lbW9yeSBvbiBmaW5hbGl6YXRpb25cbiAgICAgICAgKCkgPT4gKGJ1ZmZlciA9IGNsb3NpbmdTdWJzY3JpYmVyID0gbnVsbCEpXG4gICAgICApXG4gICAgKTtcbiAgfSk7XG59XG4iXX0=
