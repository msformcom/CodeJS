import { map } from './map.mjs';
/* tslint:enable:max-line-length */
/**
 * Maps each source value to its specified nested property.
 *
 * <span class="informal">Like {@link map}, but meant only for picking one of
 * the nested properties of every emitted value.</span>
 *
 * ![](pluck.png)
 *
 * Given a list of strings or numbers describing a path to a property, retrieves
 * the value of a specified nested property from all values in the source
 * Observable. If a property can't be resolved, it will return `undefined` for
 * that value.
 *
 * ## Example
 *
 * Map every click to the tagName of the clicked target element
 *
 * ```ts
 * import { fromEvent, pluck } from 'rxjs';
 *
 * const clicks = fromEvent(document, 'click');
 * const tagNames = clicks.pipe(pluck('target', 'tagName'));
 *
 * tagNames.subscribe(x => console.log(x));
 * ```
 *
 * @see {@link map}
 *
 * @param properties The nested properties to pluck from each source
 * value.
 * @return A function that returns an Observable of property values from the
 * source values.
 * @deprecated Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8.
 */
export function pluck(...properties) {
    const length = properties.length;
    if (length === 0) {
        throw new Error('list of properties cannot be empty.');
    }
    return map((x) => {
        let currentProp = x;
        for (let i = 0; i < length; i++) {
            const p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];
            if (typeof p !== 'undefined') {
                currentProp = p;
            }
            else {
                return undefined;
            }
        }
        return currentProp;
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvcGx1Y2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQW9ENUIsbUNBQW1DO0FBRW5DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQ0c7QUFDSCxNQUFNLFVBQVUsS0FBSyxDQUFPLEdBQUcsVUFBMkM7SUFDeEUsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQztJQUNqQyxJQUFJLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUNELE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDZixJQUFJLFdBQVcsR0FBUSxDQUFDLENBQUM7UUFDekIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxHQUFHLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFdBQVcsRUFBRSxDQUFDO2dCQUM3QixXQUFXLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLENBQUM7aUJBQU0sQ0FBQztnQkFDTixPQUFPLFNBQVMsQ0FBQztZQUNuQixDQUFDO1FBQ0gsQ0FBQztRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL3BsdWNrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHsgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXG4vKiogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBtYXB9IGFuZCBvcHRpb25hbCBjaGFpbmluZzogYHBsdWNrKCdmb28nLCAnYmFyJylgIGlzIGBtYXAoeCA9PiB4Py5mb28/LmJhcilgLiBXaWxsIGJlIHJlbW92ZWQgaW4gdjguICovXG5leHBvcnQgZnVuY3Rpb24gcGx1Y2s8VCwgSzEgZXh0ZW5kcyBrZXlvZiBUPihrMTogSzEpOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFRbSzFdPjtcbi8qKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIG1hcH0gYW5kIG9wdGlvbmFsIGNoYWluaW5nOiBgcGx1Y2soJ2ZvbycsICdiYXInKWAgaXMgYG1hcCh4ID0+IHg/LmZvbz8uYmFyKWAuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwbHVjazxULCBLMSBleHRlbmRzIGtleW9mIFQsIEsyIGV4dGVuZHMga2V5b2YgVFtLMV0+KGsxOiBLMSwgazI6IEsyKTogT3BlcmF0b3JGdW5jdGlvbjxULCBUW0sxXVtLMl0+O1xuLyoqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgbWFwfSBhbmQgb3B0aW9uYWwgY2hhaW5pbmc6IGBwbHVjaygnZm9vJywgJ2JhcicpYCBpcyBgbWFwKHggPT4geD8uZm9vPy5iYXIpYC4gV2lsbCBiZSByZW1vdmVkIGluIHY4LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBsdWNrPFQsIEsxIGV4dGVuZHMga2V5b2YgVCwgSzIgZXh0ZW5kcyBrZXlvZiBUW0sxXSwgSzMgZXh0ZW5kcyBrZXlvZiBUW0sxXVtLMl0+KFxuICBrMTogSzEsXG4gIGsyOiBLMixcbiAgazM6IEszXG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFRbSzFdW0syXVtLM10+O1xuLyoqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgbWFwfSBhbmQgb3B0aW9uYWwgY2hhaW5pbmc6IGBwbHVjaygnZm9vJywgJ2JhcicpYCBpcyBgbWFwKHggPT4geD8uZm9vPy5iYXIpYC4gV2lsbCBiZSByZW1vdmVkIGluIHY4LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBsdWNrPFQsIEsxIGV4dGVuZHMga2V5b2YgVCwgSzIgZXh0ZW5kcyBrZXlvZiBUW0sxXSwgSzMgZXh0ZW5kcyBrZXlvZiBUW0sxXVtLMl0sIEs0IGV4dGVuZHMga2V5b2YgVFtLMV1bSzJdW0szXT4oXG4gIGsxOiBLMSxcbiAgazI6IEsyLFxuICBrMzogSzMsXG4gIGs0OiBLNFxuKTogT3BlcmF0b3JGdW5jdGlvbjxULCBUW0sxXVtLMl1bSzNdW0s0XT47XG4vKiogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBtYXB9IGFuZCBvcHRpb25hbCBjaGFpbmluZzogYHBsdWNrKCdmb28nLCAnYmFyJylgIGlzIGBtYXAoeCA9PiB4Py5mb28/LmJhcilgLiBXaWxsIGJlIHJlbW92ZWQgaW4gdjguICovXG5leHBvcnQgZnVuY3Rpb24gcGx1Y2s8XG4gIFQsXG4gIEsxIGV4dGVuZHMga2V5b2YgVCxcbiAgSzIgZXh0ZW5kcyBrZXlvZiBUW0sxXSxcbiAgSzMgZXh0ZW5kcyBrZXlvZiBUW0sxXVtLMl0sXG4gIEs0IGV4dGVuZHMga2V5b2YgVFtLMV1bSzJdW0szXSxcbiAgSzUgZXh0ZW5kcyBrZXlvZiBUW0sxXVtLMl1bSzNdW0s0XVxuPihrMTogSzEsIGsyOiBLMiwgazM6IEszLCBrNDogSzQsIGs1OiBLNSk6IE9wZXJhdG9yRnVuY3Rpb248VCwgVFtLMV1bSzJdW0szXVtLNF1bSzVdPjtcbi8qKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIG1hcH0gYW5kIG9wdGlvbmFsIGNoYWluaW5nOiBgcGx1Y2soJ2ZvbycsICdiYXInKWAgaXMgYG1hcCh4ID0+IHg/LmZvbz8uYmFyKWAuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwbHVjazxcbiAgVCxcbiAgSzEgZXh0ZW5kcyBrZXlvZiBULFxuICBLMiBleHRlbmRzIGtleW9mIFRbSzFdLFxuICBLMyBleHRlbmRzIGtleW9mIFRbSzFdW0syXSxcbiAgSzQgZXh0ZW5kcyBrZXlvZiBUW0sxXVtLMl1bSzNdLFxuICBLNSBleHRlbmRzIGtleW9mIFRbSzFdW0syXVtLM11bSzRdLFxuICBLNiBleHRlbmRzIGtleW9mIFRbSzFdW0syXVtLM11bSzRdW0s1XVxuPihrMTogSzEsIGsyOiBLMiwgazM6IEszLCBrNDogSzQsIGs1OiBLNSwgazY6IEs2KTogT3BlcmF0b3JGdW5jdGlvbjxULCBUW0sxXVtLMl1bSzNdW0s0XVtLNV1bSzZdPjtcbi8qKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIG1hcH0gYW5kIG9wdGlvbmFsIGNoYWluaW5nOiBgcGx1Y2soJ2ZvbycsICdiYXInKWAgaXMgYG1hcCh4ID0+IHg/LmZvbz8uYmFyKWAuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwbHVjazxcbiAgVCxcbiAgSzEgZXh0ZW5kcyBrZXlvZiBULFxuICBLMiBleHRlbmRzIGtleW9mIFRbSzFdLFxuICBLMyBleHRlbmRzIGtleW9mIFRbSzFdW0syXSxcbiAgSzQgZXh0ZW5kcyBrZXlvZiBUW0sxXVtLMl1bSzNdLFxuICBLNSBleHRlbmRzIGtleW9mIFRbSzFdW0syXVtLM11bSzRdLFxuICBLNiBleHRlbmRzIGtleW9mIFRbSzFdW0syXVtLM11bSzRdW0s1XVxuPihrMTogSzEsIGsyOiBLMiwgazM6IEszLCBrNDogSzQsIGs1OiBLNSwgazY6IEs2LCAuLi5yZXN0OiBzdHJpbmdbXSk6IE9wZXJhdG9yRnVuY3Rpb248VCwgdW5rbm93bj47XG4vKiogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBtYXB9IGFuZCBvcHRpb25hbCBjaGFpbmluZzogYHBsdWNrKCdmb28nLCAnYmFyJylgIGlzIGBtYXAoeCA9PiB4Py5mb28/LmJhcilgLiBXaWxsIGJlIHJlbW92ZWQgaW4gdjguICovXG5leHBvcnQgZnVuY3Rpb24gcGx1Y2s8VD4oLi4ucHJvcGVydGllczogc3RyaW5nW10pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIHVua25vd24+O1xuLyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cblxuLyoqXG4gKiBNYXBzIGVhY2ggc291cmNlIHZhbHVlIHRvIGl0cyBzcGVjaWZpZWQgbmVzdGVkIHByb3BlcnR5LlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5MaWtlIHtAbGluayBtYXB9LCBidXQgbWVhbnQgb25seSBmb3IgcGlja2luZyBvbmUgb2ZcbiAqIHRoZSBuZXN0ZWQgcHJvcGVydGllcyBvZiBldmVyeSBlbWl0dGVkIHZhbHVlLjwvc3Bhbj5cbiAqXG4gKiAhW10ocGx1Y2sucG5nKVxuICpcbiAqIEdpdmVuIGEgbGlzdCBvZiBzdHJpbmdzIG9yIG51bWJlcnMgZGVzY3JpYmluZyBhIHBhdGggdG8gYSBwcm9wZXJ0eSwgcmV0cmlldmVzXG4gKiB0aGUgdmFsdWUgb2YgYSBzcGVjaWZpZWQgbmVzdGVkIHByb3BlcnR5IGZyb20gYWxsIHZhbHVlcyBpbiB0aGUgc291cmNlXG4gKiBPYnNlcnZhYmxlLiBJZiBhIHByb3BlcnR5IGNhbid0IGJlIHJlc29sdmVkLCBpdCB3aWxsIHJldHVybiBgdW5kZWZpbmVkYCBmb3JcbiAqIHRoYXQgdmFsdWUuXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIE1hcCBldmVyeSBjbGljayB0byB0aGUgdGFnTmFtZSBvZiB0aGUgY2xpY2tlZCB0YXJnZXQgZWxlbWVudFxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBmcm9tRXZlbnQsIHBsdWNrIH0gZnJvbSAncnhqcyc7XG4gKlxuICogY29uc3QgY2xpY2tzID0gZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIGNvbnN0IHRhZ05hbWVzID0gY2xpY2tzLnBpcGUocGx1Y2soJ3RhcmdldCcsICd0YWdOYW1lJykpO1xuICpcbiAqIHRhZ05hbWVzLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqIGBgYFxuICpcbiAqIEBzZWUge0BsaW5rIG1hcH1cbiAqXG4gKiBAcGFyYW0gcHJvcGVydGllcyBUaGUgbmVzdGVkIHByb3BlcnRpZXMgdG8gcGx1Y2sgZnJvbSBlYWNoIHNvdXJjZVxuICogdmFsdWUuXG4gKiBAcmV0dXJuIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIE9ic2VydmFibGUgb2YgcHJvcGVydHkgdmFsdWVzIGZyb20gdGhlXG4gKiBzb3VyY2UgdmFsdWVzLlxuICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBtYXB9IGFuZCBvcHRpb25hbCBjaGFpbmluZzogYHBsdWNrKCdmb28nLCAnYmFyJylgIGlzIGBtYXAoeCA9PiB4Py5mb28/LmJhcilgLiBXaWxsIGJlIHJlbW92ZWQgaW4gdjguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwbHVjazxULCBSPiguLi5wcm9wZXJ0aWVzOiBBcnJheTxzdHJpbmcgfCBudW1iZXIgfCBzeW1ib2w+KTogT3BlcmF0b3JGdW5jdGlvbjxULCBSPiB7XG4gIGNvbnN0IGxlbmd0aCA9IHByb3BlcnRpZXMubGVuZ3RoO1xuICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdsaXN0IG9mIHByb3BlcnRpZXMgY2Fubm90IGJlIGVtcHR5LicpO1xuICB9XG4gIHJldHVybiBtYXAoKHgpID0+IHtcbiAgICBsZXQgY3VycmVudFByb3A6IGFueSA9IHg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcCA9IGN1cnJlbnRQcm9wPy5bcHJvcGVydGllc1tpXV07XG4gICAgICBpZiAodHlwZW9mIHAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGN1cnJlbnRQcm9wID0gcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50UHJvcDtcbiAgfSk7XG59XG4iXX0=
