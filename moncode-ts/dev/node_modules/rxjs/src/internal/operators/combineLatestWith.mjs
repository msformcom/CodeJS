import { combineLatest } from './combineLatest.mjs';
/**
 * Create an observable that combines the latest values from all passed observables and the source
 * into arrays and emits them.
 *
 * Returns an observable, that when subscribed to, will subscribe to the source observable and all
 * sources provided as arguments. Once all sources emit at least one value, all of the latest values
 * will be emitted as an array. After that, every time any source emits a value, all of the latest values
 * will be emitted as an array.
 *
 * This is a useful operator for eagerly calculating values based off of changed inputs.
 *
 * ## Example
 *
 * Simple concatenation of values from two inputs
 *
 * ```ts
 * import { fromEvent, combineLatestWith, map } from 'rxjs';
 *
 * // Setup: Add two inputs to the page
 * const input1 = document.createElement('input');
 * document.body.appendChild(input1);
 * const input2 = document.createElement('input');
 * document.body.appendChild(input2);
 *
 * // Get streams of changes
 * const input1Changes$ = fromEvent(input1, 'change');
 * const input2Changes$ = fromEvent(input2, 'change');
 *
 * // Combine the changes by adding them together
 * input1Changes$.pipe(
 *   combineLatestWith(input2Changes$),
 *   map(([e1, e2]) => (<HTMLInputElement>e1.target).value + ' - ' + (<HTMLInputElement>e2.target).value)
 * )
 * .subscribe(x => console.log(x));
 * ```
 *
 * @param otherSources the other sources to subscribe to.
 * @return A function that returns an Observable that emits the latest
 * emissions from both source and provided Observables.
 */
export function combineLatestWith(...otherSources) {
    return combineLatest(...otherSources);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUxhdGVzdFdpdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRWhEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1Q0c7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLEdBQUcsWUFBMEM7SUFFN0MsT0FBTyxhQUFhLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQztBQUN4QyxDQUFDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUxhdGVzdFdpdGguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlSW5wdXRUdXBsZSwgT3BlcmF0b3JGdW5jdGlvbiwgQ29ucyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QgfSBmcm9tICcuL2NvbWJpbmVMYXRlc3QnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBvYnNlcnZhYmxlIHRoYXQgY29tYmluZXMgdGhlIGxhdGVzdCB2YWx1ZXMgZnJvbSBhbGwgcGFzc2VkIG9ic2VydmFibGVzIGFuZCB0aGUgc291cmNlXG4gKiBpbnRvIGFycmF5cyBhbmQgZW1pdHMgdGhlbS5cbiAqXG4gKiBSZXR1cm5zIGFuIG9ic2VydmFibGUsIHRoYXQgd2hlbiBzdWJzY3JpYmVkIHRvLCB3aWxsIHN1YnNjcmliZSB0byB0aGUgc291cmNlIG9ic2VydmFibGUgYW5kIGFsbFxuICogc291cmNlcyBwcm92aWRlZCBhcyBhcmd1bWVudHMuIE9uY2UgYWxsIHNvdXJjZXMgZW1pdCBhdCBsZWFzdCBvbmUgdmFsdWUsIGFsbCBvZiB0aGUgbGF0ZXN0IHZhbHVlc1xuICogd2lsbCBiZSBlbWl0dGVkIGFzIGFuIGFycmF5LiBBZnRlciB0aGF0LCBldmVyeSB0aW1lIGFueSBzb3VyY2UgZW1pdHMgYSB2YWx1ZSwgYWxsIG9mIHRoZSBsYXRlc3QgdmFsdWVzXG4gKiB3aWxsIGJlIGVtaXR0ZWQgYXMgYW4gYXJyYXkuXG4gKlxuICogVGhpcyBpcyBhIHVzZWZ1bCBvcGVyYXRvciBmb3IgZWFnZXJseSBjYWxjdWxhdGluZyB2YWx1ZXMgYmFzZWQgb2ZmIG9mIGNoYW5nZWQgaW5wdXRzLlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBTaW1wbGUgY29uY2F0ZW5hdGlvbiBvZiB2YWx1ZXMgZnJvbSB0d28gaW5wdXRzXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGZyb21FdmVudCwgY29tYmluZUxhdGVzdFdpdGgsIG1hcCB9IGZyb20gJ3J4anMnO1xuICpcbiAqIC8vIFNldHVwOiBBZGQgdHdvIGlucHV0cyB0byB0aGUgcGFnZVxuICogY29uc3QgaW5wdXQxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAqIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaW5wdXQxKTtcbiAqIGNvbnN0IGlucHV0MiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gKiBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlucHV0Mik7XG4gKlxuICogLy8gR2V0IHN0cmVhbXMgb2YgY2hhbmdlc1xuICogY29uc3QgaW5wdXQxQ2hhbmdlcyQgPSBmcm9tRXZlbnQoaW5wdXQxLCAnY2hhbmdlJyk7XG4gKiBjb25zdCBpbnB1dDJDaGFuZ2VzJCA9IGZyb21FdmVudChpbnB1dDIsICdjaGFuZ2UnKTtcbiAqXG4gKiAvLyBDb21iaW5lIHRoZSBjaGFuZ2VzIGJ5IGFkZGluZyB0aGVtIHRvZ2V0aGVyXG4gKiBpbnB1dDFDaGFuZ2VzJC5waXBlKFxuICogICBjb21iaW5lTGF0ZXN0V2l0aChpbnB1dDJDaGFuZ2VzJCksXG4gKiAgIG1hcCgoW2UxLCBlMl0pID0+ICg8SFRNTElucHV0RWxlbWVudD5lMS50YXJnZXQpLnZhbHVlICsgJyAtICcgKyAoPEhUTUxJbnB1dEVsZW1lbnQ+ZTIudGFyZ2V0KS52YWx1ZSlcbiAqIClcbiAqIC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gb3RoZXJTb3VyY2VzIHRoZSBvdGhlciBzb3VyY2VzIHRvIHN1YnNjcmliZSB0by5cbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSBsYXRlc3RcbiAqIGVtaXNzaW9ucyBmcm9tIGJvdGggc291cmNlIGFuZCBwcm92aWRlZCBPYnNlcnZhYmxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVMYXRlc3RXaXRoPFQsIEEgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10+KFxuICAuLi5vdGhlclNvdXJjZXM6IFsuLi5PYnNlcnZhYmxlSW5wdXRUdXBsZTxBPl1cbik6IE9wZXJhdG9yRnVuY3Rpb248VCwgQ29uczxULCBBPj4ge1xuICByZXR1cm4gY29tYmluZUxhdGVzdCguLi5vdGhlclNvdXJjZXMpO1xufVxuIl19
