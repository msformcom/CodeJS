import { createOperatorSubscriber } from './OperatorSubscriber.mjs';
/**
 * A basic scan operation. This is used for `scan` and `reduce`.
 * @param accumulator The accumulator to use
 * @param seed The seed value for the state to accumulate
 * @param hasSeed Whether or not a seed was provided
 * @param emitOnNext Whether or not to emit the state on next
 * @param emitBeforeComplete Whether or not to emit the before completion
 */
export function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return (source, subscriber) => {
        // Whether or not we have state yet. This will only be
        // false before the first value arrives if we didn't get
        // a seed value.
        let hasState = hasSeed;
        // The state that we're tracking, starting with the seed,
        // if there is one, and then updated by the return value
        // from the accumulator on each emission.
        let state = seed;
        // An index to pass to the accumulator function.
        let index = 0;
        // Subscribe to our source. All errors and completions are passed through.
        source.subscribe(createOperatorSubscriber(subscriber, (value) => {
            // Always increment the index.
            const i = index++;
            // Set the state
            state = hasState
                ? // We already have state, so we can get the new state from the accumulator
                    accumulator(state, value, i)
                : // We didn't have state yet, a seed value was not provided, so
                    // we set the state to the first value, and mark that we have state now
                    ((hasState = true), value);
            // Maybe send it to the consumer.
            emitOnNext && subscriber.next(state);
        }, 
        // If an onComplete was given, call it, otherwise
        // just pass through the complete notification to the consumer.
        emitBeforeComplete &&
            (() => {
                hasState && subscriber.next(state);
                subscriber.complete();
            })));
    };
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvc2NhbkludGVybmFscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRTs7Ozs7OztHQU9HO0FBRUgsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsV0FBMkQsRUFDM0QsSUFBTyxFQUNQLE9BQWdCLEVBQ2hCLFVBQW1CLEVBQ25CLGtCQUFxQztJQUVyQyxPQUFPLENBQUMsTUFBcUIsRUFBRSxVQUEyQixFQUFFLEVBQUU7UUFDNUQsc0RBQXNEO1FBQ3RELHdEQUF3RDtRQUN4RCxnQkFBZ0I7UUFDaEIsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLHlEQUF5RDtRQUN6RCx3REFBd0Q7UUFDeEQseUNBQXlDO1FBQ3pDLElBQUksS0FBSyxHQUFRLElBQUksQ0FBQztRQUN0QixnREFBZ0Q7UUFDaEQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRWQsMEVBQTBFO1FBQzFFLE1BQU0sQ0FBQyxTQUFTLENBQ2Qsd0JBQXdCLENBQ3RCLFVBQVUsRUFDVixDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ1IsOEJBQThCO1lBQzlCLE1BQU0sQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDO1lBQ2xCLGdCQUFnQjtZQUNoQixLQUFLLEdBQUcsUUFBUTtnQkFDZCxDQUFDLENBQUMsMEVBQTBFO29CQUMxRSxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBQzlCLENBQUMsQ0FBQyw4REFBOEQ7b0JBRTlELHVFQUF1RTtvQkFDdkUsQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUUvQixpQ0FBaUM7WUFDakMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsQ0FBQztRQUNELGlEQUFpRDtRQUNqRCwrREFBK0Q7UUFDL0Qsa0JBQWtCO1lBQ2hCLENBQUMsR0FBRyxFQUFFO2dCQUNKLFFBQVEsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNuQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQ0wsQ0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW5JbnRlcm5hbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5cbi8qKlxuICogQSBiYXNpYyBzY2FuIG9wZXJhdGlvbi4gVGhpcyBpcyB1c2VkIGZvciBgc2NhbmAgYW5kIGByZWR1Y2VgLlxuICogQHBhcmFtIGFjY3VtdWxhdG9yIFRoZSBhY2N1bXVsYXRvciB0byB1c2VcbiAqIEBwYXJhbSBzZWVkIFRoZSBzZWVkIHZhbHVlIGZvciB0aGUgc3RhdGUgdG8gYWNjdW11bGF0ZVxuICogQHBhcmFtIGhhc1NlZWQgV2hldGhlciBvciBub3QgYSBzZWVkIHdhcyBwcm92aWRlZFxuICogQHBhcmFtIGVtaXRPbk5leHQgV2hldGhlciBvciBub3QgdG8gZW1pdCB0aGUgc3RhdGUgb24gbmV4dFxuICogQHBhcmFtIGVtaXRCZWZvcmVDb21wbGV0ZSBXaGV0aGVyIG9yIG5vdCB0byBlbWl0IHRoZSBiZWZvcmUgY29tcGxldGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FuSW50ZXJuYWxzPFYsIEEsIFM+KFxuICBhY2N1bXVsYXRvcjogKGFjYzogViB8IEEgfCBTLCB2YWx1ZTogViwgaW5kZXg6IG51bWJlcikgPT4gQSxcbiAgc2VlZDogUyxcbiAgaGFzU2VlZDogYm9vbGVhbixcbiAgZW1pdE9uTmV4dDogYm9vbGVhbixcbiAgZW1pdEJlZm9yZUNvbXBsZXRlPzogdW5kZWZpbmVkIHwgdHJ1ZVxuKSB7XG4gIHJldHVybiAoc291cmNlOiBPYnNlcnZhYmxlPFY+LCBzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPGFueT4pID0+IHtcbiAgICAvLyBXaGV0aGVyIG9yIG5vdCB3ZSBoYXZlIHN0YXRlIHlldC4gVGhpcyB3aWxsIG9ubHkgYmVcbiAgICAvLyBmYWxzZSBiZWZvcmUgdGhlIGZpcnN0IHZhbHVlIGFycml2ZXMgaWYgd2UgZGlkbid0IGdldFxuICAgIC8vIGEgc2VlZCB2YWx1ZS5cbiAgICBsZXQgaGFzU3RhdGUgPSBoYXNTZWVkO1xuICAgIC8vIFRoZSBzdGF0ZSB0aGF0IHdlJ3JlIHRyYWNraW5nLCBzdGFydGluZyB3aXRoIHRoZSBzZWVkLFxuICAgIC8vIGlmIHRoZXJlIGlzIG9uZSwgYW5kIHRoZW4gdXBkYXRlZCBieSB0aGUgcmV0dXJuIHZhbHVlXG4gICAgLy8gZnJvbSB0aGUgYWNjdW11bGF0b3Igb24gZWFjaCBlbWlzc2lvbi5cbiAgICBsZXQgc3RhdGU6IGFueSA9IHNlZWQ7XG4gICAgLy8gQW4gaW5kZXggdG8gcGFzcyB0byB0aGUgYWNjdW11bGF0b3IgZnVuY3Rpb24uXG4gICAgbGV0IGluZGV4ID0gMDtcblxuICAgIC8vIFN1YnNjcmliZSB0byBvdXIgc291cmNlLiBBbGwgZXJyb3JzIGFuZCBjb21wbGV0aW9ucyBhcmUgcGFzc2VkIHRocm91Z2guXG4gICAgc291cmNlLnN1YnNjcmliZShcbiAgICAgIGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihcbiAgICAgICAgc3Vic2NyaWJlcixcbiAgICAgICAgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgLy8gQWx3YXlzIGluY3JlbWVudCB0aGUgaW5kZXguXG4gICAgICAgICAgY29uc3QgaSA9IGluZGV4Kys7XG4gICAgICAgICAgLy8gU2V0IHRoZSBzdGF0ZVxuICAgICAgICAgIHN0YXRlID0gaGFzU3RhdGVcbiAgICAgICAgICAgID8gLy8gV2UgYWxyZWFkeSBoYXZlIHN0YXRlLCBzbyB3ZSBjYW4gZ2V0IHRoZSBuZXcgc3RhdGUgZnJvbSB0aGUgYWNjdW11bGF0b3JcbiAgICAgICAgICAgICAgYWNjdW11bGF0b3Ioc3RhdGUsIHZhbHVlLCBpKVxuICAgICAgICAgICAgOiAvLyBXZSBkaWRuJ3QgaGF2ZSBzdGF0ZSB5ZXQsIGEgc2VlZCB2YWx1ZSB3YXMgbm90IHByb3ZpZGVkLCBzb1xuXG4gICAgICAgICAgICAgIC8vIHdlIHNldCB0aGUgc3RhdGUgdG8gdGhlIGZpcnN0IHZhbHVlLCBhbmQgbWFyayB0aGF0IHdlIGhhdmUgc3RhdGUgbm93XG4gICAgICAgICAgICAgICgoaGFzU3RhdGUgPSB0cnVlKSwgdmFsdWUpO1xuXG4gICAgICAgICAgLy8gTWF5YmUgc2VuZCBpdCB0byB0aGUgY29uc3VtZXIuXG4gICAgICAgICAgZW1pdE9uTmV4dCAmJiBzdWJzY3JpYmVyLm5leHQoc3RhdGUpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBJZiBhbiBvbkNvbXBsZXRlIHdhcyBnaXZlbiwgY2FsbCBpdCwgb3RoZXJ3aXNlXG4gICAgICAgIC8vIGp1c3QgcGFzcyB0aHJvdWdoIHRoZSBjb21wbGV0ZSBub3RpZmljYXRpb24gdG8gdGhlIGNvbnN1bWVyLlxuICAgICAgICBlbWl0QmVmb3JlQ29tcGxldGUgJiZcbiAgICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgICAgaGFzU3RhdGUgJiYgc3Vic2NyaWJlci5uZXh0KHN0YXRlKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICB9KVxuICAgICAgKVxuICAgICk7XG4gIH07XG59XG4iXX0=
