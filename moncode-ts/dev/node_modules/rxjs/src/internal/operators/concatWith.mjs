import { concat } from './concat.mjs';
/**
 * Emits all of the values from the source observable, then, once it completes, subscribes
 * to each observable source provided, one at a time, emitting all of their values, and not subscribing
 * to the next one until it completes.
 *
 * `concat(a$, b$, c$)` is the same as `a$.pipe(concatWith(b$, c$))`.
 *
 * ## Example
 *
 * Listen for one mouse click, then listen for all mouse moves.
 *
 * ```ts
 * import { fromEvent, map, take, concatWith } from 'rxjs';
 *
 * const clicks$ = fromEvent(document, 'click');
 * const moves$ = fromEvent(document, 'mousemove');
 *
 * clicks$.pipe(
 *   map(() => 'click'),
 *   take(1),
 *   concatWith(
 *     moves$.pipe(
 *       map(() => 'move')
 *     )
 *   )
 * )
 * .subscribe(x => console.log(x));
 *
 * // 'click'
 * // 'move'
 * // 'move'
 * // 'move'
 * // ...
 * ```
 *
 * @param otherSources Other observable sources to subscribe to, in sequence, after the original source is complete.
 * @return A function that returns an Observable that concatenates
 * subscriptions to the source and provided Observables subscribing to the next
 * only once the current subscription completes.
 */
export function concatWith(...otherSources) {
    return concat(...otherSources);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0V2l0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1Q0c7QUFDSCxNQUFNLFVBQVUsVUFBVSxDQUN4QixHQUFHLFlBQTBDO0lBRTdDLE9BQU8sTUFBTSxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUM7QUFDakMsQ0FBQyIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdFdpdGguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlSW5wdXRUdXBsZSwgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGNvbmNhdCB9IGZyb20gJy4vY29uY2F0JztcblxuLyoqXG4gKiBFbWl0cyBhbGwgb2YgdGhlIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZSwgdGhlbiwgb25jZSBpdCBjb21wbGV0ZXMsIHN1YnNjcmliZXNcbiAqIHRvIGVhY2ggb2JzZXJ2YWJsZSBzb3VyY2UgcHJvdmlkZWQsIG9uZSBhdCBhIHRpbWUsIGVtaXR0aW5nIGFsbCBvZiB0aGVpciB2YWx1ZXMsIGFuZCBub3Qgc3Vic2NyaWJpbmdcbiAqIHRvIHRoZSBuZXh0IG9uZSB1bnRpbCBpdCBjb21wbGV0ZXMuXG4gKlxuICogYGNvbmNhdChhJCwgYiQsIGMkKWAgaXMgdGhlIHNhbWUgYXMgYGEkLnBpcGUoY29uY2F0V2l0aChiJCwgYyQpKWAuXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIExpc3RlbiBmb3Igb25lIG1vdXNlIGNsaWNrLCB0aGVuIGxpc3RlbiBmb3IgYWxsIG1vdXNlIG1vdmVzLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBmcm9tRXZlbnQsIG1hcCwgdGFrZSwgY29uY2F0V2l0aCB9IGZyb20gJ3J4anMnO1xuICpcbiAqIGNvbnN0IGNsaWNrcyQgPSBmcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogY29uc3QgbW92ZXMkID0gZnJvbUV2ZW50KGRvY3VtZW50LCAnbW91c2Vtb3ZlJyk7XG4gKlxuICogY2xpY2tzJC5waXBlKFxuICogICBtYXAoKCkgPT4gJ2NsaWNrJyksXG4gKiAgIHRha2UoMSksXG4gKiAgIGNvbmNhdFdpdGgoXG4gKiAgICAgbW92ZXMkLnBpcGUoXG4gKiAgICAgICBtYXAoKCkgPT4gJ21vdmUnKVxuICogICAgIClcbiAqICAgKVxuICogKVxuICogLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiAvLyAnY2xpY2snXG4gKiAvLyAnbW92ZSdcbiAqIC8vICdtb3ZlJ1xuICogLy8gJ21vdmUnXG4gKiAvLyAuLi5cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvdGhlclNvdXJjZXMgT3RoZXIgb2JzZXJ2YWJsZSBzb3VyY2VzIHRvIHN1YnNjcmliZSB0bywgaW4gc2VxdWVuY2UsIGFmdGVyIHRoZSBvcmlnaW5hbCBzb3VyY2UgaXMgY29tcGxldGUuXG4gKiBAcmV0dXJuIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBjb25jYXRlbmF0ZXNcbiAqIHN1YnNjcmlwdGlvbnMgdG8gdGhlIHNvdXJjZSBhbmQgcHJvdmlkZWQgT2JzZXJ2YWJsZXMgc3Vic2NyaWJpbmcgdG8gdGhlIG5leHRcbiAqIG9ubHkgb25jZSB0aGUgY3VycmVudCBzdWJzY3JpcHRpb24gY29tcGxldGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0V2l0aDxULCBBIGV4dGVuZHMgcmVhZG9ubHkgdW5rbm93bltdPihcbiAgLi4ub3RoZXJTb3VyY2VzOiBbLi4uT2JzZXJ2YWJsZUlucHV0VHVwbGU8QT5dXG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFQgfCBBW251bWJlcl0+IHtcbiAgcmV0dXJuIGNvbmNhdCguLi5vdGhlclNvdXJjZXMpO1xufVxuIl19
