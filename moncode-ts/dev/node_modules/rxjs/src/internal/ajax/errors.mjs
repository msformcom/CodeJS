import { getXHRResponse } from './getXHRResponse.mjs';
import { createErrorClass } from '../util/createErrorClass.mjs';
/**
 * Thrown when an error occurs during an AJAX request.
 * This is only exported because it is useful for checking to see if an error
 * is an `instanceof AjaxError`. DO NOT create new instances of `AjaxError` with
 * the constructor.
 *
 * @class AjaxError
 * @see {@link ajax}
 */
export const AjaxError = createErrorClass((_super) => function AjaxErrorImpl(message, xhr, request) {
    this.message = message;
    this.name = 'AjaxError';
    this.xhr = xhr;
    this.request = request;
    this.status = xhr.status;
    this.responseType = xhr.responseType;
    let response;
    try {
        // This can throw in IE, because we have to do a JSON.parse of
        // the response in some cases to get the expected response property.
        response = getXHRResponse(xhr);
    }
    catch (err) {
        response = xhr.responseText;
    }
    this.response = response;
});
/**
 * Thrown when an AJAX request times out. Not to be confused with {@link TimeoutError}.
 *
 * This is exported only because it is useful for checking to see if errors are an
 * `instanceof AjaxTimeoutError`. DO NOT use the constructor to create an instance of
 * this type.
 *
 * @class AjaxTimeoutError
 * @see {@link ajax}
 */
export const AjaxTimeoutError = (() => {
    function AjaxTimeoutErrorImpl(xhr, request) {
        AjaxError.call(this, 'ajax timeout', xhr, request);
        this.name = 'AjaxTimeoutError';
        return this;
    }
    AjaxTimeoutErrorImpl.prototype = Object.create(AjaxError.prototype);
    return AjaxTimeoutErrorImpl;
})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9hamF4L2Vycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUE2QzVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFrQixnQkFBZ0IsQ0FDdEQsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNULFNBQVMsYUFBYSxDQUFZLE9BQWUsRUFBRSxHQUFtQixFQUFFLE9BQW9CO0lBQzFGLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDO0lBQ3hCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ2YsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztJQUNyQyxJQUFJLFFBQWEsQ0FBQztJQUNsQixJQUFJLENBQUM7UUFDSCw4REFBOEQ7UUFDOUQsb0VBQW9FO1FBQ3BFLFFBQVEsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDYixRQUFRLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztJQUM5QixDQUFDO0lBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDM0IsQ0FBQyxDQUNKLENBQUM7QUFZRjs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBeUIsQ0FBQyxHQUFHLEVBQUU7SUFDMUQsU0FBUyxvQkFBb0IsQ0FBWSxHQUFtQixFQUFFLE9BQW9CO1FBQ2hGLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLElBQUksR0FBRyxrQkFBa0IsQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRCxvQkFBb0IsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEUsT0FBTyxvQkFBb0IsQ0FBQztBQUM5QixDQUFDLENBQUMsRUFBUyxDQUFDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9hamF4L2Vycm9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFqYXhSZXF1ZXN0IH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBnZXRYSFJSZXNwb25zZSB9IGZyb20gJy4vZ2V0WEhSUmVzcG9uc2UnO1xuaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4uL3V0aWwvY3JlYXRlRXJyb3JDbGFzcyc7XG5cbi8qKlxuICogQSBub3JtYWxpemVkIEFKQVggZXJyb3IuXG4gKlxuICogQHNlZSB7QGxpbmsgYWpheH1cbiAqXG4gKiBAY2xhc3MgQWpheEVycm9yXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWpheEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAvKipcbiAgICogVGhlIFhIUiBpbnN0YW5jZSBhc3NvY2lhdGVkIHdpdGggdGhlIGVycm9yLlxuICAgKi9cbiAgeGhyOiBYTUxIdHRwUmVxdWVzdDtcblxuICAvKipcbiAgICogVGhlIEFqYXhSZXF1ZXN0IGFzc29jaWF0ZWQgd2l0aCB0aGUgZXJyb3IuXG4gICAqL1xuICByZXF1ZXN0OiBBamF4UmVxdWVzdDtcblxuICAvKipcbiAgICogVGhlIEhUVFAgc3RhdHVzIGNvZGUsIGlmIHRoZSByZXF1ZXN0IGhhcyBjb21wbGV0ZWQuIElmIG5vdCxcbiAgICogaXQgaXMgc2V0IHRvIGAwYC5cbiAgICovXG4gIHN0YXR1czogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVzcG9uc2VUeXBlIChlLmcuICdqc29uJywgJ2FycmF5YnVmZmVyJywgb3IgJ3htbCcpLlxuICAgKi9cbiAgcmVzcG9uc2VUeXBlOiBYTUxIdHRwUmVxdWVzdFJlc3BvbnNlVHlwZTtcblxuICAvKipcbiAgICogVGhlIHJlc3BvbnNlIGRhdGEuXG4gICAqL1xuICByZXNwb25zZTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFqYXhFcnJvckN0b3Ige1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gZGV0YWlsLiBEbyBub3QgY29uc3RydWN0IGVycm9yIGluc3RhbmNlcy5cbiAgICogQ2Fubm90IGJlIHRhZ2dlZCBhcyBpbnRlcm5hbDogaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9yeGpzL2lzc3Vlcy82MjY5XG4gICAqL1xuICBuZXcgKG1lc3NhZ2U6IHN0cmluZywgeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogQWpheFJlcXVlc3QpOiBBamF4RXJyb3I7XG59XG5cbi8qKlxuICogVGhyb3duIHdoZW4gYW4gZXJyb3Igb2NjdXJzIGR1cmluZyBhbiBBSkFYIHJlcXVlc3QuXG4gKiBUaGlzIGlzIG9ubHkgZXhwb3J0ZWQgYmVjYXVzZSBpdCBpcyB1c2VmdWwgZm9yIGNoZWNraW5nIHRvIHNlZSBpZiBhbiBlcnJvclxuICogaXMgYW4gYGluc3RhbmNlb2YgQWpheEVycm9yYC4gRE8gTk9UIGNyZWF0ZSBuZXcgaW5zdGFuY2VzIG9mIGBBamF4RXJyb3JgIHdpdGhcbiAqIHRoZSBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAY2xhc3MgQWpheEVycm9yXG4gKiBAc2VlIHtAbGluayBhamF4fVxuICovXG5leHBvcnQgY29uc3QgQWpheEVycm9yOiBBamF4RXJyb3JDdG9yID0gY3JlYXRlRXJyb3JDbGFzcyhcbiAgKF9zdXBlcikgPT5cbiAgICBmdW5jdGlvbiBBamF4RXJyb3JJbXBsKHRoaXM6IGFueSwgbWVzc2FnZTogc3RyaW5nLCB4aHI6IFhNTEh0dHBSZXF1ZXN0LCByZXF1ZXN0OiBBamF4UmVxdWVzdCkge1xuICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgIHRoaXMubmFtZSA9ICdBamF4RXJyb3InO1xuICAgICAgdGhpcy54aHIgPSB4aHI7XG4gICAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgICAgdGhpcy5zdGF0dXMgPSB4aHIuc3RhdHVzO1xuICAgICAgdGhpcy5yZXNwb25zZVR5cGUgPSB4aHIucmVzcG9uc2VUeXBlO1xuICAgICAgbGV0IHJlc3BvbnNlOiBhbnk7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGNhbiB0aHJvdyBpbiBJRSwgYmVjYXVzZSB3ZSBoYXZlIHRvIGRvIGEgSlNPTi5wYXJzZSBvZlxuICAgICAgICAvLyB0aGUgcmVzcG9uc2UgaW4gc29tZSBjYXNlcyB0byBnZXQgdGhlIGV4cGVjdGVkIHJlc3BvbnNlIHByb3BlcnR5LlxuICAgICAgICByZXNwb25zZSA9IGdldFhIUlJlc3BvbnNlKHhocik7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgfVxuICAgICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIH1cbik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWpheFRpbWVvdXRFcnJvciBleHRlbmRzIEFqYXhFcnJvciB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIEFqYXhUaW1lb3V0RXJyb3JDdG9yIHtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIEludGVybmFsIGltcGxlbWVudGF0aW9uIGRldGFpbC4gRG8gbm90IGNvbnN0cnVjdCBlcnJvciBpbnN0YW5jZXMuXG4gICAqIENhbm5vdCBiZSB0YWdnZWQgYXMgaW50ZXJuYWw6IGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdGl2ZVgvcnhqcy9pc3N1ZXMvNjI2OVxuICAgKi9cbiAgbmV3ICh4aHI6IFhNTEh0dHBSZXF1ZXN0LCByZXF1ZXN0OiBBamF4UmVxdWVzdCk6IEFqYXhUaW1lb3V0RXJyb3I7XG59XG5cbi8qKlxuICogVGhyb3duIHdoZW4gYW4gQUpBWCByZXF1ZXN0IHRpbWVzIG91dC4gTm90IHRvIGJlIGNvbmZ1c2VkIHdpdGgge0BsaW5rIFRpbWVvdXRFcnJvcn0uXG4gKlxuICogVGhpcyBpcyBleHBvcnRlZCBvbmx5IGJlY2F1c2UgaXQgaXMgdXNlZnVsIGZvciBjaGVja2luZyB0byBzZWUgaWYgZXJyb3JzIGFyZSBhblxuICogYGluc3RhbmNlb2YgQWpheFRpbWVvdXRFcnJvcmAuIERPIE5PVCB1c2UgdGhlIGNvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZlxuICogdGhpcyB0eXBlLlxuICpcbiAqIEBjbGFzcyBBamF4VGltZW91dEVycm9yXG4gKiBAc2VlIHtAbGluayBhamF4fVxuICovXG5leHBvcnQgY29uc3QgQWpheFRpbWVvdXRFcnJvcjogQWpheFRpbWVvdXRFcnJvckN0b3IgPSAoKCkgPT4ge1xuICBmdW5jdGlvbiBBamF4VGltZW91dEVycm9ySW1wbCh0aGlzOiBhbnksIHhocjogWE1MSHR0cFJlcXVlc3QsIHJlcXVlc3Q6IEFqYXhSZXF1ZXN0KSB7XG4gICAgQWpheEVycm9yLmNhbGwodGhpcywgJ2FqYXggdGltZW91dCcsIHhociwgcmVxdWVzdCk7XG4gICAgdGhpcy5uYW1lID0gJ0FqYXhUaW1lb3V0RXJyb3InO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIEFqYXhUaW1lb3V0RXJyb3JJbXBsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQWpheEVycm9yLnByb3RvdHlwZSk7XG4gIHJldHVybiBBamF4VGltZW91dEVycm9ySW1wbDtcbn0pKCkgYXMgYW55O1xuIl19
