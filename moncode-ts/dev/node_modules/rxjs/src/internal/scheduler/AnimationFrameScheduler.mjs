import { AsyncScheduler } from './AsyncScheduler.mjs';
export class AnimationFrameScheduler extends AsyncScheduler {
    flush(action) {
        this._active = true;
        // The async id that effects a call to flush is stored in _scheduled.
        // Before executing an action, it's necessary to check the action's async
        // id to determine whether it's supposed to be executed in the current
        // flush.
        // Previous implementations of this method used a count to determine this,
        // but that was unsound, as actions that are unsubscribed - i.e. cancelled -
        // are removed from the actions array and that can shift actions that are
        // scheduled to be executed in a subsequent flush into positions at which
        // they are executed within the current flush.
        const flushId = this._scheduled;
        this._scheduled = undefined;
        const { actions } = this;
        let error;
        action = action || actions.shift();
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
            while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9zY2hlZHVsZXIvQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxELE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxjQUFjO0lBQ2xELEtBQUssQ0FBQyxNQUF5QjtRQUNwQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixxRUFBcUU7UUFDckUseUVBQXlFO1FBQ3pFLHNFQUFzRTtRQUN0RSxTQUFTO1FBQ1QsMEVBQTBFO1FBQzFFLDRFQUE0RTtRQUM1RSx5RUFBeUU7UUFDekUseUVBQXlFO1FBQ3pFLDhDQUE4QztRQUM5QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBRTVCLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxLQUFVLENBQUM7UUFDZixNQUFNLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUcsQ0FBQztRQUVwQyxHQUFHLENBQUM7WUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUN6RCxNQUFNO1lBQ1IsQ0FBQztRQUNILENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsRUFBRSxLQUFLLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFFNUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFFckIsSUFBSSxLQUFLLEVBQUUsQ0FBQztZQUNWLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLEVBQUUsS0FBSyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7Z0JBQ3pFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN2QixDQUFDO1lBQ0QsTUFBTSxLQUFLLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztDQUNGIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9zY2hlZHVsZXIvQW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gJy4vQXN5bmNBY3Rpb24nO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcblxuZXhwb3J0IGNsYXNzIEFuaW1hdGlvbkZyYW1lU2NoZWR1bGVyIGV4dGVuZHMgQXN5bmNTY2hlZHVsZXIge1xuICBwdWJsaWMgZmx1c2goYWN0aW9uPzogQXN5bmNBY3Rpb248YW55Pik6IHZvaWQge1xuICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgLy8gVGhlIGFzeW5jIGlkIHRoYXQgZWZmZWN0cyBhIGNhbGwgdG8gZmx1c2ggaXMgc3RvcmVkIGluIF9zY2hlZHVsZWQuXG4gICAgLy8gQmVmb3JlIGV4ZWN1dGluZyBhbiBhY3Rpb24sIGl0J3MgbmVjZXNzYXJ5IHRvIGNoZWNrIHRoZSBhY3Rpb24ncyBhc3luY1xuICAgIC8vIGlkIHRvIGRldGVybWluZSB3aGV0aGVyIGl0J3Mgc3VwcG9zZWQgdG8gYmUgZXhlY3V0ZWQgaW4gdGhlIGN1cnJlbnRcbiAgICAvLyBmbHVzaC5cbiAgICAvLyBQcmV2aW91cyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhpcyBtZXRob2QgdXNlZCBhIGNvdW50IHRvIGRldGVybWluZSB0aGlzLFxuICAgIC8vIGJ1dCB0aGF0IHdhcyB1bnNvdW5kLCBhcyBhY3Rpb25zIHRoYXQgYXJlIHVuc3Vic2NyaWJlZCAtIGkuZS4gY2FuY2VsbGVkIC1cbiAgICAvLyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBhY3Rpb25zIGFycmF5IGFuZCB0aGF0IGNhbiBzaGlmdCBhY3Rpb25zIHRoYXQgYXJlXG4gICAgLy8gc2NoZWR1bGVkIHRvIGJlIGV4ZWN1dGVkIGluIGEgc3Vic2VxdWVudCBmbHVzaCBpbnRvIHBvc2l0aW9ucyBhdCB3aGljaFxuICAgIC8vIHRoZXkgYXJlIGV4ZWN1dGVkIHdpdGhpbiB0aGUgY3VycmVudCBmbHVzaC5cbiAgICBjb25zdCBmbHVzaElkID0gdGhpcy5fc2NoZWR1bGVkO1xuICAgIHRoaXMuX3NjaGVkdWxlZCA9IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IHsgYWN0aW9ucyB9ID0gdGhpcztcbiAgICBsZXQgZXJyb3I6IGFueTtcbiAgICBhY3Rpb24gPSBhY3Rpb24gfHwgYWN0aW9ucy5zaGlmdCgpITtcblxuICAgIGRvIHtcbiAgICAgIGlmICgoZXJyb3IgPSBhY3Rpb24uZXhlY3V0ZShhY3Rpb24uc3RhdGUsIGFjdGlvbi5kZWxheSkpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zWzBdKSAmJiBhY3Rpb24uaWQgPT09IGZsdXNoSWQgJiYgYWN0aW9ucy5zaGlmdCgpKTtcblxuICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnNbMF0pICYmIGFjdGlvbi5pZCA9PT0gZmx1c2hJZCAmJiBhY3Rpb25zLnNoaWZ0KCkpIHtcbiAgICAgICAgYWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
