import { Subscription } from '../Subscription.mjs';
export const animationFrameProvider = {
    // When accessing the delegate, use the variable rather than `this` so that
    // the functions can be called without being bound to the provider.
    schedule(callback) {
        let request = requestAnimationFrame;
        let cancel = cancelAnimationFrame;
        const { delegate } = animationFrameProvider;
        if (delegate) {
            request = delegate.requestAnimationFrame;
            cancel = delegate.cancelAnimationFrame;
        }
        const handle = request((timestamp) => {
            // Clear the cancel function. The request has been fulfilled, so
            // attempting to cancel the request upon unsubscription would be
            // pointless.
            cancel = undefined;
            callback(timestamp);
        });
        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));
    },
    requestAnimationFrame(...args) {
        const { delegate } = animationFrameProvider;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);
    },
    cancelAnimationFrame(...args) {
        const { delegate } = animationFrameProvider;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);
    },
    delegate: undefined,
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9zY2hlZHVsZXIvYW5pbWF0aW9uRnJhbWVQcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFjL0MsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQTJCO0lBQzVELDJFQUEyRTtJQUMzRSxtRUFBbUU7SUFDbkUsUUFBUSxDQUFDLFFBQVE7UUFDZixJQUFJLE9BQU8sR0FBRyxxQkFBcUIsQ0FBQztRQUNwQyxJQUFJLE1BQU0sR0FBNEMsb0JBQW9CLENBQUM7UUFDM0UsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLHNCQUFzQixDQUFDO1FBQzVDLElBQUksUUFBUSxFQUFFLENBQUM7WUFDYixPQUFPLEdBQUcsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQ3pDLE1BQU0sR0FBRyxRQUFRLENBQUMsb0JBQW9CLENBQUM7UUFDekMsQ0FBQztRQUNELE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ25DLGdFQUFnRTtZQUNoRSxnRUFBZ0U7WUFDaEUsYUFBYTtZQUNiLE1BQU0sR0FBRyxTQUFTLENBQUM7WUFDbkIsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBQ0QscUJBQXFCLENBQUMsR0FBRyxJQUFJO1FBQzNCLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxzQkFBc0IsQ0FBQztRQUM1QyxPQUFPLENBQUMsQ0FBQSxRQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUUscUJBQXFCLEtBQUkscUJBQXFCLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFDRCxvQkFBb0IsQ0FBQyxHQUFHLElBQUk7UUFDMUIsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLHNCQUFzQixDQUFDO1FBQzVDLE9BQU8sQ0FBQyxDQUFBLFFBQVEsYUFBUixRQUFRLHVCQUFSLFFBQVEsQ0FBRSxvQkFBb0IsS0FBSSxvQkFBb0IsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUNELFFBQVEsRUFBRSxTQUFTO0NBQ3BCLENBQUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL3NjaGVkdWxlci9hbmltYXRpb25GcmFtZVByb3ZpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vU3Vic2NyaXB0aW9uJztcblxuaW50ZXJmYWNlIEFuaW1hdGlvbkZyYW1lUHJvdmlkZXIge1xuICBzY2hlZHVsZShjYWxsYmFjazogRnJhbWVSZXF1ZXN0Q2FsbGJhY2spOiBTdWJzY3JpcHRpb247XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZTogdHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWU6IHR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgZGVsZWdhdGU6XG4gICAgfCB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZTogdHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZTtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWU6IHR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICAgIH1cbiAgICB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNvbnN0IGFuaW1hdGlvbkZyYW1lUHJvdmlkZXI6IEFuaW1hdGlvbkZyYW1lUHJvdmlkZXIgPSB7XG4gIC8vIFdoZW4gYWNjZXNzaW5nIHRoZSBkZWxlZ2F0ZSwgdXNlIHRoZSB2YXJpYWJsZSByYXRoZXIgdGhhbiBgdGhpc2Agc28gdGhhdFxuICAvLyB0aGUgZnVuY3Rpb25zIGNhbiBiZSBjYWxsZWQgd2l0aG91dCBiZWluZyBib3VuZCB0byB0aGUgcHJvdmlkZXIuXG4gIHNjaGVkdWxlKGNhbGxiYWNrKSB7XG4gICAgbGV0IHJlcXVlc3QgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgbGV0IGNhbmNlbDogdHlwZW9mIGNhbmNlbEFuaW1hdGlvbkZyYW1lIHwgdW5kZWZpbmVkID0gY2FuY2VsQW5pbWF0aW9uRnJhbWU7XG4gICAgY29uc3QgeyBkZWxlZ2F0ZSB9ID0gYW5pbWF0aW9uRnJhbWVQcm92aWRlcjtcbiAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgIHJlcXVlc3QgPSBkZWxlZ2F0ZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gICAgICBjYW5jZWwgPSBkZWxlZ2F0ZS5jYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlID0gcmVxdWVzdCgodGltZXN0YW1wKSA9PiB7XG4gICAgICAvLyBDbGVhciB0aGUgY2FuY2VsIGZ1bmN0aW9uLiBUaGUgcmVxdWVzdCBoYXMgYmVlbiBmdWxmaWxsZWQsIHNvXG4gICAgICAvLyBhdHRlbXB0aW5nIHRvIGNhbmNlbCB0aGUgcmVxdWVzdCB1cG9uIHVuc3Vic2NyaXB0aW9uIHdvdWxkIGJlXG4gICAgICAvLyBwb2ludGxlc3MuXG4gICAgICBjYW5jZWwgPSB1bmRlZmluZWQ7XG4gICAgICBjYWxsYmFjayh0aW1lc3RhbXApO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKCgpID0+IGNhbmNlbD8uKGhhbmRsZSkpO1xuICB9LFxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoLi4uYXJncykge1xuICAgIGNvbnN0IHsgZGVsZWdhdGUgfSA9IGFuaW1hdGlvbkZyYW1lUHJvdmlkZXI7XG4gICAgcmV0dXJuIChkZWxlZ2F0ZT8ucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHJlcXVlc3RBbmltYXRpb25GcmFtZSkoLi4uYXJncyk7XG4gIH0sXG4gIGNhbmNlbEFuaW1hdGlvbkZyYW1lKC4uLmFyZ3MpIHtcbiAgICBjb25zdCB7IGRlbGVnYXRlIH0gPSBhbmltYXRpb25GcmFtZVByb3ZpZGVyO1xuICAgIHJldHVybiAoZGVsZWdhdGU/LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IGNhbmNlbEFuaW1hdGlvbkZyYW1lKSguLi5hcmdzKTtcbiAgfSxcbiAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4iXX0=
