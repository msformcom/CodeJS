import { AsyncScheduler } from './AsyncScheduler.mjs';
export class AsapScheduler extends AsyncScheduler {
    flush(action) {
        this._active = true;
        // The async id that effects a call to flush is stored in _scheduled.
        // Before executing an action, it's necessary to check the action's async
        // id to determine whether it's supposed to be executed in the current
        // flush.
        // Previous implementations of this method used a count to determine this,
        // but that was unsound, as actions that are unsubscribed - i.e. cancelled -
        // are removed from the actions array and that can shift actions that are
        // scheduled to be executed in a subsequent flush into positions at which
        // they are executed within the current flush.
        const flushId = this._scheduled;
        this._scheduled = undefined;
        const { actions } = this;
        let error;
        action = action || actions.shift();
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
            while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9zY2hlZHVsZXIvQXNhcFNjaGVkdWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbEQsTUFBTSxPQUFPLGFBQWMsU0FBUSxjQUFjO0lBQ3hDLEtBQUssQ0FBQyxNQUF5QjtRQUNwQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixxRUFBcUU7UUFDckUseUVBQXlFO1FBQ3pFLHNFQUFzRTtRQUN0RSxTQUFTO1FBQ1QsMEVBQTBFO1FBQzFFLDRFQUE0RTtRQUM1RSx5RUFBeUU7UUFDekUseUVBQXlFO1FBQ3pFLDhDQUE4QztRQUM5QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBRTVCLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxLQUFVLENBQUM7UUFDZixNQUFNLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUcsQ0FBQztRQUVwQyxHQUFHLENBQUM7WUFDRixJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUN6RCxNQUFNO1lBQ1IsQ0FBQztRQUNILENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsRUFBRSxLQUFLLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFFNUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFFckIsSUFBSSxLQUFLLEVBQUUsQ0FBQztZQUNWLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLEVBQUUsS0FBSyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7Z0JBQ3pFLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN2QixDQUFDO1lBQ0QsTUFBTSxLQUFLLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztDQUNGIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9zY2hlZHVsZXIvQXNhcFNjaGVkdWxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jQWN0aW9uIH0gZnJvbSAnLi9Bc3luY0FjdGlvbic7XG5pbXBvcnQgeyBBc3luY1NjaGVkdWxlciB9IGZyb20gJy4vQXN5bmNTY2hlZHVsZXInO1xuXG5leHBvcnQgY2xhc3MgQXNhcFNjaGVkdWxlciBleHRlbmRzIEFzeW5jU2NoZWR1bGVyIHtcbiAgcHVibGljIGZsdXNoKGFjdGlvbj86IEFzeW5jQWN0aW9uPGFueT4pOiB2b2lkIHtcbiAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgIC8vIFRoZSBhc3luYyBpZCB0aGF0IGVmZmVjdHMgYSBjYWxsIHRvIGZsdXNoIGlzIHN0b3JlZCBpbiBfc2NoZWR1bGVkLlxuICAgIC8vIEJlZm9yZSBleGVjdXRpbmcgYW4gYWN0aW9uLCBpdCdzIG5lY2Vzc2FyeSB0byBjaGVjayB0aGUgYWN0aW9uJ3MgYXN5bmNcbiAgICAvLyBpZCB0byBkZXRlcm1pbmUgd2hldGhlciBpdCdzIHN1cHBvc2VkIHRvIGJlIGV4ZWN1dGVkIGluIHRoZSBjdXJyZW50XG4gICAgLy8gZmx1c2guXG4gICAgLy8gUHJldmlvdXMgaW1wbGVtZW50YXRpb25zIG9mIHRoaXMgbWV0aG9kIHVzZWQgYSBjb3VudCB0byBkZXRlcm1pbmUgdGhpcyxcbiAgICAvLyBidXQgdGhhdCB3YXMgdW5zb3VuZCwgYXMgYWN0aW9ucyB0aGF0IGFyZSB1bnN1YnNjcmliZWQgLSBpLmUuIGNhbmNlbGxlZCAtXG4gICAgLy8gYXJlIHJlbW92ZWQgZnJvbSB0aGUgYWN0aW9ucyBhcnJheSBhbmQgdGhhdCBjYW4gc2hpZnQgYWN0aW9ucyB0aGF0IGFyZVxuICAgIC8vIHNjaGVkdWxlZCB0byBiZSBleGVjdXRlZCBpbiBhIHN1YnNlcXVlbnQgZmx1c2ggaW50byBwb3NpdGlvbnMgYXQgd2hpY2hcbiAgICAvLyB0aGV5IGFyZSBleGVjdXRlZCB3aXRoaW4gdGhlIGN1cnJlbnQgZmx1c2guXG4gICAgY29uc3QgZmx1c2hJZCA9IHRoaXMuX3NjaGVkdWxlZDtcbiAgICB0aGlzLl9zY2hlZHVsZWQgPSB1bmRlZmluZWQ7XG5cbiAgICBjb25zdCB7IGFjdGlvbnMgfSA9IHRoaXM7XG4gICAgbGV0IGVycm9yOiBhbnk7XG4gICAgYWN0aW9uID0gYWN0aW9uIHx8IGFjdGlvbnMuc2hpZnQoKSE7XG5cbiAgICBkbyB7XG4gICAgICBpZiAoKGVycm9yID0gYWN0aW9uLmV4ZWN1dGUoYWN0aW9uLnN0YXRlLCBhY3Rpb24uZGVsYXkpKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IHdoaWxlICgoYWN0aW9uID0gYWN0aW9uc1swXSkgJiYgYWN0aW9uLmlkID09PSBmbHVzaElkICYmIGFjdGlvbnMuc2hpZnQoKSk7XG5cbiAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcblxuICAgIGlmIChlcnJvcikge1xuICAgICAgd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zWzBdKSAmJiBhY3Rpb24uaWQgPT09IGZsdXNoSWQgJiYgYWN0aW9ucy5zaGlmdCgpKSB7XG4gICAgICAgIGFjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59XG4iXX0=
