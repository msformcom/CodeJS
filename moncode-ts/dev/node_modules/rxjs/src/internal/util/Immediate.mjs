let nextHandle = 1;
// The promise needs to be created lazily otherwise it won't be patched by Zones
let resolved;
const activeHandles = {};
/**
 * Finds the handle in the list of active handles, and removes it.
 * Returns `true` if found, `false` otherwise. Used both to clear
 * Immediate scheduled tasks, and to identify if a task should be scheduled.
 */
function findAndClearHandle(handle) {
    if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
    }
    return false;
}
/**
 * Helper functions to schedule and unschedule microtasks.
 */
export const Immediate = {
    setImmediate(cb) {
        const handle = nextHandle++;
        activeHandles[handle] = true;
        if (!resolved) {
            resolved = Promise.resolve();
        }
        resolved.then(() => findAndClearHandle(handle) && cb());
        return handle;
    },
    clearImmediate(handle) {
        findAndClearHandle(handle);
    },
};
/**
 * Used for internal testing purposes only. Do not export from library.
 */
export const TestTools = {
    pending() {
        return Object.keys(activeHandles).length;
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC91dGlsL0ltbWVkaWF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFDbkIsZ0ZBQWdGO0FBQ2hGLElBQUksUUFBc0IsQ0FBQztBQUMzQixNQUFNLGFBQWEsR0FBMkIsRUFBRSxDQUFDO0FBRWpEOzs7O0dBSUc7QUFDSCxTQUFTLGtCQUFrQixDQUFDLE1BQWM7SUFDeEMsSUFBSSxNQUFNLElBQUksYUFBYSxFQUFFLENBQUM7UUFDNUIsT0FBTyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUc7SUFDdkIsWUFBWSxDQUFDLEVBQWM7UUFDekIsTUFBTSxNQUFNLEdBQUcsVUFBVSxFQUFFLENBQUM7UUFDNUIsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDZCxRQUFRLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQy9CLENBQUM7UUFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELGNBQWMsQ0FBQyxNQUFjO1FBQzNCLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUM7Q0FDRixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUc7SUFDdkIsT0FBTztRQUNMLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDM0MsQ0FBQztDQUNGLENBQUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL3V0aWwvSW1tZWRpYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IG5leHRIYW5kbGUgPSAxO1xuLy8gVGhlIHByb21pc2UgbmVlZHMgdG8gYmUgY3JlYXRlZCBsYXppbHkgb3RoZXJ3aXNlIGl0IHdvbid0IGJlIHBhdGNoZWQgYnkgWm9uZXNcbmxldCByZXNvbHZlZDogUHJvbWlzZTxhbnk+O1xuY29uc3QgYWN0aXZlSGFuZGxlczogeyBba2V5OiBudW1iZXJdOiBhbnkgfSA9IHt9O1xuXG4vKipcbiAqIEZpbmRzIHRoZSBoYW5kbGUgaW4gdGhlIGxpc3Qgb2YgYWN0aXZlIGhhbmRsZXMsIGFuZCByZW1vdmVzIGl0LlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgZm91bmQsIGBmYWxzZWAgb3RoZXJ3aXNlLiBVc2VkIGJvdGggdG8gY2xlYXJcbiAqIEltbWVkaWF0ZSBzY2hlZHVsZWQgdGFza3MsIGFuZCB0byBpZGVudGlmeSBpZiBhIHRhc2sgc2hvdWxkIGJlIHNjaGVkdWxlZC5cbiAqL1xuZnVuY3Rpb24gZmluZEFuZENsZWFySGFuZGxlKGhhbmRsZTogbnVtYmVyKTogYm9vbGVhbiB7XG4gIGlmIChoYW5kbGUgaW4gYWN0aXZlSGFuZGxlcykge1xuICAgIGRlbGV0ZSBhY3RpdmVIYW5kbGVzW2hhbmRsZV07XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbnMgdG8gc2NoZWR1bGUgYW5kIHVuc2NoZWR1bGUgbWljcm90YXNrcy5cbiAqL1xuZXhwb3J0IGNvbnN0IEltbWVkaWF0ZSA9IHtcbiAgc2V0SW1tZWRpYXRlKGNiOiAoKSA9PiB2b2lkKTogbnVtYmVyIHtcbiAgICBjb25zdCBoYW5kbGUgPSBuZXh0SGFuZGxlKys7XG4gICAgYWN0aXZlSGFuZGxlc1toYW5kbGVdID0gdHJ1ZTtcbiAgICBpZiAoIXJlc29sdmVkKSB7XG4gICAgICByZXNvbHZlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZXNvbHZlZC50aGVuKCgpID0+IGZpbmRBbmRDbGVhckhhbmRsZShoYW5kbGUpICYmIGNiKCkpO1xuICAgIHJldHVybiBoYW5kbGU7XG4gIH0sXG5cbiAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBmaW5kQW5kQ2xlYXJIYW5kbGUoaGFuZGxlKTtcbiAgfSxcbn07XG5cbi8qKlxuICogVXNlZCBmb3IgaW50ZXJuYWwgdGVzdGluZyBwdXJwb3NlcyBvbmx5LiBEbyBub3QgZXhwb3J0IGZyb20gbGlicmFyeS5cbiAqL1xuZXhwb3J0IGNvbnN0IFRlc3RUb29scyA9IHtcbiAgcGVuZGluZygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoYWN0aXZlSGFuZGxlcykubGVuZ3RoO1xuICB9XG59O1xuIl19
