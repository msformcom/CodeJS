import { Observable } from '../Observable.mjs';
import { innerFrom } from './innerFrom.mjs';
import { argsOrArgArray } from '../util/argsOrArgArray.mjs';
import { createOperatorSubscriber } from '../operators/OperatorSubscriber.mjs';
/**
 * Returns an observable that mirrors the first source observable to emit an item.
 *
 * ![](race.png)
 *
 * `race` returns an observable, that when subscribed to, subscribes to all source observables immediately.
 * As soon as one of the source observables emits a value, the result unsubscribes from the other sources.
 * The resulting observable will forward all notifications, including error and completion, from the "winning"
 * source observable.
 *
 * If one of the used source observable throws an errors before a first notification
 * the race operator will also throw an error, no matter if another source observable
 * could potentially win the race.
 *
 * `race` can be useful for selecting the response from the fastest network connection for
 * HTTP or WebSockets. `race` can also be useful for switching observable context based on user
 * input.
 *
 * ## Example
 *
 * Subscribes to the observable that was the first to start emitting.
 *
 * ```ts
 * import { interval, map, race } from 'rxjs';
 *
 * const obs1 = interval(7000).pipe(map(() => 'slow one'));
 * const obs2 = interval(3000).pipe(map(() => 'fast one'));
 * const obs3 = interval(5000).pipe(map(() => 'medium one'));
 *
 * race(obs1, obs2, obs3)
 *   .subscribe(winner => console.log(winner));
 *
 * // Outputs
 * // a series of 'fast one'
 * ```
 *
 * @param {...Observables} ...observables sources used to race for which Observable emits first.
 * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.
 */
export function race(...sources) {
    sources = argsOrArgArray(sources);
    // If only one source was passed, just return it. Otherwise return the race.
    return sources.length === 1 ? innerFrom(sources[0]) : new Observable(raceInit(sources));
}
/**
 * An observable initializer function for both the static version and the
 * operator version of race.
 * @param sources The sources to race
 */
export function raceInit(sources) {
    return (subscriber) => {
        let subscriptions = [];
        // Subscribe to all of the sources. Note that we are checking `subscriptions` here
        // Is is an array of all actively "racing" subscriptions, and it is `null` after the
        // race has been won. So, if we have racer that synchronously "wins", this loop will
        // stop before it subscribes to any more.
        for (let i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
            subscriptions.push(innerFrom(sources[i]).subscribe(createOperatorSubscriber(subscriber, (value) => {
                if (subscriptions) {
                    // We're still racing, but we won! So unsubscribe
                    // all other subscriptions that we have, except this one.
                    for (let s = 0; s < subscriptions.length; s++) {
                        s !== i && subscriptions[s].unsubscribe();
                    }
                    subscriptions = null;
                }
                subscriber.next(value);
            })));
        }
    };
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL3JhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQU0zRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQ0c7QUFDSCxNQUFNLFVBQVUsSUFBSSxDQUFJLEdBQUcsT0FBc0Q7SUFDL0UsT0FBTyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsQyw0RUFBNEU7SUFDNUUsT0FBTyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUksUUFBUSxDQUFDLE9BQStCLENBQUMsQ0FBQyxDQUFDO0FBQzNJLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFFBQVEsQ0FBSSxPQUE2QjtJQUN2RCxPQUFPLENBQUMsVUFBeUIsRUFBRSxFQUFFO1FBQ25DLElBQUksYUFBYSxHQUFtQixFQUFFLENBQUM7UUFFdkMsa0ZBQWtGO1FBQ2xGLG9GQUFvRjtRQUNwRixvRkFBb0Y7UUFDcEYseUNBQXlDO1FBQ3pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLGFBQWEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUMvRSxhQUFhLENBQUMsSUFBSSxDQUNoQixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBdUIsQ0FBQyxDQUFDLFNBQVMsQ0FDbkQsd0JBQXdCLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQzdDLElBQUksYUFBYSxFQUFFLENBQUM7b0JBQ2xCLGlEQUFpRDtvQkFDakQseURBQXlEO29CQUN6RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO3dCQUM5QyxDQUFDLEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztvQkFDNUMsQ0FBQztvQkFDRCxhQUFhLEdBQUcsSUFBSyxDQUFDO2dCQUN4QixDQUFDO2dCQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekIsQ0FBQyxDQUFDLENBQ0gsQ0FDRixDQUFDO1FBQ0osQ0FBQztJQUNILENBQUMsQ0FBQztBQUNKLENBQUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL29ic2VydmFibGUvcmFjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4vaW5uZXJGcm9tJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlSW5wdXQsIE9ic2VydmFibGVJbnB1dFR1cGxlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgYXJnc09yQXJnQXJyYXkgfSBmcm9tICcuLi91dGlsL2FyZ3NPckFyZ0FycmF5JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4uL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gcmFjZTxUIGV4dGVuZHMgcmVhZG9ubHkgdW5rbm93bltdPihpbnB1dHM6IFsuLi5PYnNlcnZhYmxlSW5wdXRUdXBsZTxUPl0pOiBPYnNlcnZhYmxlPFRbbnVtYmVyXT47XG5leHBvcnQgZnVuY3Rpb24gcmFjZTxUIGV4dGVuZHMgcmVhZG9ubHkgdW5rbm93bltdPiguLi5pbnB1dHM6IFsuLi5PYnNlcnZhYmxlSW5wdXRUdXBsZTxUPl0pOiBPYnNlcnZhYmxlPFRbbnVtYmVyXT47XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgbWlycm9ycyB0aGUgZmlyc3Qgc291cmNlIG9ic2VydmFibGUgdG8gZW1pdCBhbiBpdGVtLlxuICpcbiAqICFbXShyYWNlLnBuZylcbiAqXG4gKiBgcmFjZWAgcmV0dXJucyBhbiBvYnNlcnZhYmxlLCB0aGF0IHdoZW4gc3Vic2NyaWJlZCB0bywgc3Vic2NyaWJlcyB0byBhbGwgc291cmNlIG9ic2VydmFibGVzIGltbWVkaWF0ZWx5LlxuICogQXMgc29vbiBhcyBvbmUgb2YgdGhlIHNvdXJjZSBvYnNlcnZhYmxlcyBlbWl0cyBhIHZhbHVlLCB0aGUgcmVzdWx0IHVuc3Vic2NyaWJlcyBmcm9tIHRoZSBvdGhlciBzb3VyY2VzLlxuICogVGhlIHJlc3VsdGluZyBvYnNlcnZhYmxlIHdpbGwgZm9yd2FyZCBhbGwgbm90aWZpY2F0aW9ucywgaW5jbHVkaW5nIGVycm9yIGFuZCBjb21wbGV0aW9uLCBmcm9tIHRoZSBcIndpbm5pbmdcIlxuICogc291cmNlIG9ic2VydmFibGUuXG4gKlxuICogSWYgb25lIG9mIHRoZSB1c2VkIHNvdXJjZSBvYnNlcnZhYmxlIHRocm93cyBhbiBlcnJvcnMgYmVmb3JlIGEgZmlyc3Qgbm90aWZpY2F0aW9uXG4gKiB0aGUgcmFjZSBvcGVyYXRvciB3aWxsIGFsc28gdGhyb3cgYW4gZXJyb3IsIG5vIG1hdHRlciBpZiBhbm90aGVyIHNvdXJjZSBvYnNlcnZhYmxlXG4gKiBjb3VsZCBwb3RlbnRpYWxseSB3aW4gdGhlIHJhY2UuXG4gKlxuICogYHJhY2VgIGNhbiBiZSB1c2VmdWwgZm9yIHNlbGVjdGluZyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgZmFzdGVzdCBuZXR3b3JrIGNvbm5lY3Rpb24gZm9yXG4gKiBIVFRQIG9yIFdlYlNvY2tldHMuIGByYWNlYCBjYW4gYWxzbyBiZSB1c2VmdWwgZm9yIHN3aXRjaGluZyBvYnNlcnZhYmxlIGNvbnRleHQgYmFzZWQgb24gdXNlclxuICogaW5wdXQuXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIFN1YnNjcmliZXMgdG8gdGhlIG9ic2VydmFibGUgdGhhdCB3YXMgdGhlIGZpcnN0IHRvIHN0YXJ0IGVtaXR0aW5nLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBpbnRlcnZhbCwgbWFwLCByYWNlIH0gZnJvbSAncnhqcyc7XG4gKlxuICogY29uc3Qgb2JzMSA9IGludGVydmFsKDcwMDApLnBpcGUobWFwKCgpID0+ICdzbG93IG9uZScpKTtcbiAqIGNvbnN0IG9iczIgPSBpbnRlcnZhbCgzMDAwKS5waXBlKG1hcCgoKSA9PiAnZmFzdCBvbmUnKSk7XG4gKiBjb25zdCBvYnMzID0gaW50ZXJ2YWwoNTAwMCkucGlwZShtYXAoKCkgPT4gJ21lZGl1bSBvbmUnKSk7XG4gKlxuICogcmFjZShvYnMxLCBvYnMyLCBvYnMzKVxuICogICAuc3Vic2NyaWJlKHdpbm5lciA9PiBjb25zb2xlLmxvZyh3aW5uZXIpKTtcbiAqXG4gKiAvLyBPdXRwdXRzXG4gKiAvLyBhIHNlcmllcyBvZiAnZmFzdCBvbmUnXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gey4uLk9ic2VydmFibGVzfSAuLi5vYnNlcnZhYmxlcyBzb3VyY2VzIHVzZWQgdG8gcmFjZSBmb3Igd2hpY2ggT2JzZXJ2YWJsZSBlbWl0cyBmaXJzdC5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCBtaXJyb3JzIHRoZSBvdXRwdXQgb2YgdGhlIGZpcnN0IE9ic2VydmFibGUgdG8gZW1pdCBhbiBpdGVtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmFjZTxUPiguLi5zb3VyY2VzOiAoT2JzZXJ2YWJsZUlucHV0PFQ+IHwgT2JzZXJ2YWJsZUlucHV0PFQ+W10pW10pOiBPYnNlcnZhYmxlPGFueT4ge1xuICBzb3VyY2VzID0gYXJnc09yQXJnQXJyYXkoc291cmNlcyk7XG4gIC8vIElmIG9ubHkgb25lIHNvdXJjZSB3YXMgcGFzc2VkLCBqdXN0IHJldHVybiBpdC4gT3RoZXJ3aXNlIHJldHVybiB0aGUgcmFjZS5cbiAgcmV0dXJuIHNvdXJjZXMubGVuZ3RoID09PSAxID8gaW5uZXJGcm9tKHNvdXJjZXNbMF0gYXMgT2JzZXJ2YWJsZUlucHV0PFQ+KSA6IG5ldyBPYnNlcnZhYmxlPFQ+KHJhY2VJbml0KHNvdXJjZXMgYXMgT2JzZXJ2YWJsZUlucHV0PFQ+W10pKTtcbn1cblxuLyoqXG4gKiBBbiBvYnNlcnZhYmxlIGluaXRpYWxpemVyIGZ1bmN0aW9uIGZvciBib3RoIHRoZSBzdGF0aWMgdmVyc2lvbiBhbmQgdGhlXG4gKiBvcGVyYXRvciB2ZXJzaW9uIG9mIHJhY2UuXG4gKiBAcGFyYW0gc291cmNlcyBUaGUgc291cmNlcyB0byByYWNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYWNlSW5pdDxUPihzb3VyY2VzOiBPYnNlcnZhYmxlSW5wdXQ8VD5bXSkge1xuICByZXR1cm4gKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4pID0+IHtcbiAgICBsZXQgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcblxuICAgIC8vIFN1YnNjcmliZSB0byBhbGwgb2YgdGhlIHNvdXJjZXMuIE5vdGUgdGhhdCB3ZSBhcmUgY2hlY2tpbmcgYHN1YnNjcmlwdGlvbnNgIGhlcmVcbiAgICAvLyBJcyBpcyBhbiBhcnJheSBvZiBhbGwgYWN0aXZlbHkgXCJyYWNpbmdcIiBzdWJzY3JpcHRpb25zLCBhbmQgaXQgaXMgYG51bGxgIGFmdGVyIHRoZVxuICAgIC8vIHJhY2UgaGFzIGJlZW4gd29uLiBTbywgaWYgd2UgaGF2ZSByYWNlciB0aGF0IHN5bmNocm9ub3VzbHkgXCJ3aW5zXCIsIHRoaXMgbG9vcCB3aWxsXG4gICAgLy8gc3RvcCBiZWZvcmUgaXQgc3Vic2NyaWJlcyB0byBhbnkgbW9yZS5cbiAgICBmb3IgKGxldCBpID0gMDsgc3Vic2NyaXB0aW9ucyAmJiAhc3Vic2NyaWJlci5jbG9zZWQgJiYgaSA8IHNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgICAgaW5uZXJGcm9tKHNvdXJjZXNbaV0gYXMgT2JzZXJ2YWJsZUlucHV0PFQ+KS5zdWJzY3JpYmUoXG4gICAgICAgICAgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgICAgLy8gV2UncmUgc3RpbGwgcmFjaW5nLCBidXQgd2Ugd29uISBTbyB1bnN1YnNjcmliZVxuICAgICAgICAgICAgICAvLyBhbGwgb3RoZXIgc3Vic2NyaXB0aW9ucyB0aGF0IHdlIGhhdmUsIGV4Y2VwdCB0aGlzIG9uZS5cbiAgICAgICAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBzdWJzY3JpcHRpb25zLmxlbmd0aDsgcysrKSB7XG4gICAgICAgICAgICAgICAgcyAhPT0gaSAmJiBzdWJzY3JpcHRpb25zW3NdLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucyA9IG51bGwhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==
