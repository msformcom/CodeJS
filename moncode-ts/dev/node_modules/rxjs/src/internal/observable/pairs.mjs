import { from } from './from.mjs';
/**
 * Convert an object into an Observable of `[key, value]` pairs.
 *
 * <span class="informal">Turn entries of an object into a stream.</span>
 *
 * ![](pairs.png)
 *
 * `pairs` takes an arbitrary object and returns an Observable that emits arrays. Each
 * emitted array has exactly two elements - the first is a key from the object
 * and the second is a value corresponding to that key. Keys are extracted from
 * an object via `Object.keys` function, which means that they will be only
 * enumerable keys that are present on an object directly - not ones inherited
 * via prototype chain.
 *
 * By default, these arrays are emitted synchronously. To change that you can
 * pass a {@link SchedulerLike} as a second argument to `pairs`.
 *
 * ## Example
 *
 * Converts an object to an Observable
 *
 * ```ts
 * import { pairs } from 'rxjs';
 *
 * const obj = {
 *   foo: 42,
 *   bar: 56,
 *   baz: 78
 * };
 *
 * pairs(obj).subscribe({
 *   next: value => console.log(value),
 *   complete: () => console.log('Complete!')
 * });
 *
 * // Logs:
 * // ['foo', 42]
 * // ['bar', 56]
 * // ['baz', 78]
 * // 'Complete!'
 * ```
 *
 * ### Object.entries required
 *
 * In IE, you will need to polyfill `Object.entries` in order to use this.
 * [MDN has a polyfill here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries)
 *
 * @param {Object} obj The object to inspect and turn into an
 * Observable sequence.
 * @param {Scheduler} [scheduler] An optional IScheduler to schedule
 * when resulting Observable will emit values.
 * @returns {(Observable<Array<string|T>>)} An observable sequence of
 * [key, value] pairs from the object.
 * @deprecated Use `from(Object.entries(obj))` instead. Will be removed in v8.
 */
export function pairs(obj, scheduler) {
    return from(Object.entries(obj), scheduler);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL3BhaXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFzQjlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzREc7QUFDSCxNQUFNLFVBQVUsS0FBSyxDQUFDLEdBQVEsRUFBRSxTQUF5QjtJQUN2RCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQWdCLENBQUMsQ0FBQztBQUNyRCxDQUFDIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL3BhaXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU2NoZWR1bGVyTGlrZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSBgZnJvbShPYmplY3QuZW50cmllcyhvYmopKWAgaW5zdGVhZC4gV2lsbCBiZSByZW1vdmVkIGluIHY4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFpcnM8VD4oYXJyOiByZWFkb25seSBUW10sIHNjaGVkdWxlcj86IFNjaGVkdWxlckxpa2UpOiBPYnNlcnZhYmxlPFtzdHJpbmcsIFRdPjtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBmcm9tKE9iamVjdC5lbnRyaWVzKG9iaikpYCBpbnN0ZWFkLiBXaWxsIGJlIHJlbW92ZWQgaW4gdjguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYWlyczxPIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KG9iajogTywgc2NoZWR1bGVyPzogU2NoZWR1bGVyTGlrZSk6IE9ic2VydmFibGU8W2tleW9mIE8sIE9ba2V5b2YgT11dPjtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBmcm9tKE9iamVjdC5lbnRyaWVzKG9iaikpYCBpbnN0ZWFkLiBXaWxsIGJlIHJlbW92ZWQgaW4gdjguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYWlyczxUPihpdGVyYWJsZTogSXRlcmFibGU8VD4sIHNjaGVkdWxlcj86IFNjaGVkdWxlckxpa2UpOiBPYnNlcnZhYmxlPFtzdHJpbmcsIFRdPjtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBmcm9tKE9iamVjdC5lbnRyaWVzKG9iaikpYCBpbnN0ZWFkLiBXaWxsIGJlIHJlbW92ZWQgaW4gdjguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYWlycyhcbiAgbjogbnVtYmVyIHwgYmlnaW50IHwgYm9vbGVhbiB8ICgoLi4uYXJnczogYW55W10pID0+IGFueSkgfCBzeW1ib2wsXG4gIHNjaGVkdWxlcj86IFNjaGVkdWxlckxpa2Vcbik6IE9ic2VydmFibGU8W25ldmVyLCBuZXZlcl0+O1xuXG4vKipcbiAqIENvbnZlcnQgYW4gb2JqZWN0IGludG8gYW4gT2JzZXJ2YWJsZSBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+VHVybiBlbnRyaWVzIG9mIGFuIG9iamVjdCBpbnRvIGEgc3RyZWFtLjwvc3Bhbj5cbiAqXG4gKiAhW10ocGFpcnMucG5nKVxuICpcbiAqIGBwYWlyc2AgdGFrZXMgYW4gYXJiaXRyYXJ5IG9iamVjdCBhbmQgcmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgYXJyYXlzLiBFYWNoXG4gKiBlbWl0dGVkIGFycmF5IGhhcyBleGFjdGx5IHR3byBlbGVtZW50cyAtIHRoZSBmaXJzdCBpcyBhIGtleSBmcm9tIHRoZSBvYmplY3RcbiAqIGFuZCB0aGUgc2Vjb25kIGlzIGEgdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGF0IGtleS4gS2V5cyBhcmUgZXh0cmFjdGVkIGZyb21cbiAqIGFuIG9iamVjdCB2aWEgYE9iamVjdC5rZXlzYCBmdW5jdGlvbiwgd2hpY2ggbWVhbnMgdGhhdCB0aGV5IHdpbGwgYmUgb25seVxuICogZW51bWVyYWJsZSBrZXlzIHRoYXQgYXJlIHByZXNlbnQgb24gYW4gb2JqZWN0IGRpcmVjdGx5IC0gbm90IG9uZXMgaW5oZXJpdGVkXG4gKiB2aWEgcHJvdG90eXBlIGNoYWluLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZXNlIGFycmF5cyBhcmUgZW1pdHRlZCBzeW5jaHJvbm91c2x5LiBUbyBjaGFuZ2UgdGhhdCB5b3UgY2FuXG4gKiBwYXNzIGEge0BsaW5rIFNjaGVkdWxlckxpa2V9IGFzIGEgc2Vjb25kIGFyZ3VtZW50IHRvIGBwYWlyc2AuXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIENvbnZlcnRzIGFuIG9iamVjdCB0byBhbiBPYnNlcnZhYmxlXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IHBhaXJzIH0gZnJvbSAncnhqcyc7XG4gKlxuICogY29uc3Qgb2JqID0ge1xuICogICBmb286IDQyLFxuICogICBiYXI6IDU2LFxuICogICBiYXo6IDc4XG4gKiB9O1xuICpcbiAqIHBhaXJzKG9iaikuc3Vic2NyaWJlKHtcbiAqICAgbmV4dDogdmFsdWUgPT4gY29uc29sZS5sb2codmFsdWUpLFxuICogICBjb21wbGV0ZTogKCkgPT4gY29uc29sZS5sb2coJ0NvbXBsZXRlIScpXG4gKiB9KTtcbiAqXG4gKiAvLyBMb2dzOlxuICogLy8gWydmb28nLCA0Ml1cbiAqIC8vIFsnYmFyJywgNTZdXG4gKiAvLyBbJ2JheicsIDc4XVxuICogLy8gJ0NvbXBsZXRlISdcbiAqIGBgYFxuICpcbiAqICMjIyBPYmplY3QuZW50cmllcyByZXF1aXJlZFxuICpcbiAqIEluIElFLCB5b3Ugd2lsbCBuZWVkIHRvIHBvbHlmaWxsIGBPYmplY3QuZW50cmllc2AgaW4gb3JkZXIgdG8gdXNlIHRoaXMuXG4gKiBbTUROIGhhcyBhIHBvbHlmaWxsIGhlcmVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9lbnRyaWVzKVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0IGFuZCB0dXJuIGludG8gYW5cbiAqIE9ic2VydmFibGUgc2VxdWVuY2UuXG4gKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcl0gQW4gb3B0aW9uYWwgSVNjaGVkdWxlciB0byBzY2hlZHVsZVxuICogd2hlbiByZXN1bHRpbmcgT2JzZXJ2YWJsZSB3aWxsIGVtaXQgdmFsdWVzLlxuICogQHJldHVybnMgeyhPYnNlcnZhYmxlPEFycmF5PHN0cmluZ3xUPj4pfSBBbiBvYnNlcnZhYmxlIHNlcXVlbmNlIG9mXG4gKiBba2V5LCB2YWx1ZV0gcGFpcnMgZnJvbSB0aGUgb2JqZWN0LlxuICogQGRlcHJlY2F0ZWQgVXNlIGBmcm9tKE9iamVjdC5lbnRyaWVzKG9iaikpYCBpbnN0ZWFkLiBXaWxsIGJlIHJlbW92ZWQgaW4gdjguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYWlycyhvYmo6IGFueSwgc2NoZWR1bGVyPzogU2NoZWR1bGVyTGlrZSkge1xuICByZXR1cm4gZnJvbShPYmplY3QuZW50cmllcyhvYmopLCBzY2hlZHVsZXIgYXMgYW55KTtcbn1cbiJdfQ==
