import { Subject } from '../Subject.mjs';
import { Observable } from '../Observable.mjs';
import { defer } from './defer.mjs';
/**
 * The default configuration for `connectable`.
 */
const DEFAULT_CONFIG = {
    connector: () => new Subject(),
    resetOnDisconnect: true,
};
/**
 * Creates an observable that multicasts once `connect()` is called on it.
 *
 * @param source The observable source to make connectable.
 * @param config The configuration object for `connectable`.
 * @returns A "connectable" observable, that has a `connect()` method, that you must call to
 * connect the source to all consumers through the subject provided as the connector.
 */
export function connectable(source, config = DEFAULT_CONFIG) {
    // The subscription representing the connection.
    let connection = null;
    const { connector, resetOnDisconnect = true } = config;
    let subject = connector();
    const result = new Observable((subscriber) => {
        return subject.subscribe(subscriber);
    });
    // Define the `connect` function. This is what users must call
    // in order to "connect" the source to the subject that is
    // multicasting it.
    result.connect = () => {
        if (!connection || connection.closed) {
            connection = defer(() => source).subscribe(subject);
            if (resetOnDisconnect) {
                connection.add(() => (subject = connector()));
            }
        }
        return connection;
    };
    return result;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL2Nvbm5lY3RhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFckMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBbUJoQzs7R0FFRztBQUNILE1BQU0sY0FBYyxHQUErQjtJQUNqRCxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEVBQVc7SUFDdkMsaUJBQWlCLEVBQUUsSUFBSTtDQUN4QixDQUFDO0FBRUY7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQUksTUFBMEIsRUFBRSxTQUErQixjQUFjO0lBQ3RHLGdEQUFnRDtJQUNoRCxJQUFJLFVBQVUsR0FBd0IsSUFBSSxDQUFDO0lBQzNDLE1BQU0sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEdBQUcsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBQ3ZELElBQUksT0FBTyxHQUFHLFNBQVMsRUFBRSxDQUFDO0lBRTFCLE1BQU0sTUFBTSxHQUFRLElBQUksVUFBVSxDQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7UUFDbkQsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBRUgsOERBQThEO0lBQzlELDBEQUEwRDtJQUMxRCxtQkFBbUI7SUFDbkIsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUU7UUFDcEIsSUFBSSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDckMsVUFBVSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDcEQsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO2dCQUN0QixVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxHQUFHLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoRCxDQUFDO1FBQ0gsQ0FBQztRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUMsQ0FBQztJQUVGLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL29ic2VydmFibGUvY29ubmVjdGFibGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25uZWN0YWJsZSwgT2JzZXJ2YWJsZUlucHV0LCBTdWJqZWN0TGlrZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBkZWZlciB9IGZyb20gJy4vZGVmZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbm5lY3RhYmxlQ29uZmlnPFQ+IHtcbiAgLyoqXG4gICAqIEEgZmFjdG9yeSBmdW5jdGlvbiB1c2VkIHRvIGNyZWF0ZSB0aGUgU3ViamVjdCB0aHJvdWdoIHdoaWNoIHRoZSBzb3VyY2VcbiAgICogaXMgbXVsdGljYXN0LiBCeSBkZWZhdWx0IHRoaXMgY3JlYXRlcyBhIHtAbGluayBTdWJqZWN0fS5cbiAgICovXG4gIGNvbm5lY3RvcjogKCkgPT4gU3ViamVjdExpa2U8VD47XG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgcmVzdWx0aW5nIG9ic2VydmFibGUgd2lsbCByZXNldCBpbnRlcm5hbCBzdGF0ZSB1cG9uIGRpc2Nvbm5lY3Rpb25cbiAgICogYW5kIHJldHVybiB0byBhIFwiY29sZFwiIHN0YXRlLiBUaGlzIGFsbG93cyB0aGUgcmVzdWx0aW5nIG9ic2VydmFibGUgdG8gYmVcbiAgICogcmVjb25uZWN0ZWQuXG4gICAqIElmIGZhbHNlLCB1cG9uIGRpc2Nvbm5lY3Rpb24sIHRoZSBjb25uZWN0aW5nIHN1YmplY3Qgd2lsbCByZW1haW4gdGhlXG4gICAqIGNvbm5lY3Rpbmcgc3ViamVjdCwgbWVhbmluZyB0aGUgcmVzdWx0aW5nIG9ic2VydmFibGUgd2lsbCBub3QgZ28gXCJjb2xkXCIgYWdhaW4sXG4gICAqIGFuZCBzdWJzZXF1ZW50IHJlcGVhdHMgb3IgcmVzdWJzY3JpcHRpb25zIHdpbGwgcmVzdWJzY3JpYmUgdG8gdGhhdCBzYW1lIHN1YmplY3QuXG4gICAqL1xuICByZXNldE9uRGlzY29ubmVjdD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBmb3IgYGNvbm5lY3RhYmxlYC5cbiAqL1xuY29uc3QgREVGQVVMVF9DT05GSUc6IENvbm5lY3RhYmxlQ29uZmlnPHVua25vd24+ID0ge1xuICBjb25uZWN0b3I6ICgpID0+IG5ldyBTdWJqZWN0PHVua25vd24+KCksXG4gIHJlc2V0T25EaXNjb25uZWN0OiB0cnVlLFxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9ic2VydmFibGUgdGhhdCBtdWx0aWNhc3RzIG9uY2UgYGNvbm5lY3QoKWAgaXMgY2FsbGVkIG9uIGl0LlxuICpcbiAqIEBwYXJhbSBzb3VyY2UgVGhlIG9ic2VydmFibGUgc291cmNlIHRvIG1ha2UgY29ubmVjdGFibGUuXG4gKiBAcGFyYW0gY29uZmlnIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBmb3IgYGNvbm5lY3RhYmxlYC5cbiAqIEByZXR1cm5zIEEgXCJjb25uZWN0YWJsZVwiIG9ic2VydmFibGUsIHRoYXQgaGFzIGEgYGNvbm5lY3QoKWAgbWV0aG9kLCB0aGF0IHlvdSBtdXN0IGNhbGwgdG9cbiAqIGNvbm5lY3QgdGhlIHNvdXJjZSB0byBhbGwgY29uc3VtZXJzIHRocm91Z2ggdGhlIHN1YmplY3QgcHJvdmlkZWQgYXMgdGhlIGNvbm5lY3Rvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3RhYmxlPFQ+KHNvdXJjZTogT2JzZXJ2YWJsZUlucHV0PFQ+LCBjb25maWc6IENvbm5lY3RhYmxlQ29uZmlnPFQ+ID0gREVGQVVMVF9DT05GSUcpOiBDb25uZWN0YWJsZTxUPiB7XG4gIC8vIFRoZSBzdWJzY3JpcHRpb24gcmVwcmVzZW50aW5nIHRoZSBjb25uZWN0aW9uLlxuICBsZXQgY29ubmVjdGlvbjogU3Vic2NyaXB0aW9uIHwgbnVsbCA9IG51bGw7XG4gIGNvbnN0IHsgY29ubmVjdG9yLCByZXNldE9uRGlzY29ubmVjdCA9IHRydWUgfSA9IGNvbmZpZztcbiAgbGV0IHN1YmplY3QgPSBjb25uZWN0b3IoKTtcblxuICBjb25zdCByZXN1bHQ6IGFueSA9IG5ldyBPYnNlcnZhYmxlPFQ+KChzdWJzY3JpYmVyKSA9PiB7XG4gICAgcmV0dXJuIHN1YmplY3Quc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICB9KTtcblxuICAvLyBEZWZpbmUgdGhlIGBjb25uZWN0YCBmdW5jdGlvbi4gVGhpcyBpcyB3aGF0IHVzZXJzIG11c3QgY2FsbFxuICAvLyBpbiBvcmRlciB0byBcImNvbm5lY3RcIiB0aGUgc291cmNlIHRvIHRoZSBzdWJqZWN0IHRoYXQgaXNcbiAgLy8gbXVsdGljYXN0aW5nIGl0LlxuICByZXN1bHQuY29ubmVjdCA9ICgpID0+IHtcbiAgICBpZiAoIWNvbm5lY3Rpb24gfHwgY29ubmVjdGlvbi5jbG9zZWQpIHtcbiAgICAgIGNvbm5lY3Rpb24gPSBkZWZlcigoKSA9PiBzb3VyY2UpLnN1YnNjcmliZShzdWJqZWN0KTtcbiAgICAgIGlmIChyZXNldE9uRGlzY29ubmVjdCkge1xuICAgICAgICBjb25uZWN0aW9uLmFkZCgoKSA9PiAoc3ViamVjdCA9IGNvbm5lY3RvcigpKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb25uZWN0aW9uO1xuICB9O1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iXX0=
