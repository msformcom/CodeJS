import { popScheduler } from '../util/args.mjs';
import { from } from './from.mjs';
/**
 * Converts the arguments to an observable sequence.
 *
 * <span class="informal">Each argument becomes a `next` notification.</span>
 *
 * ![](of.png)
 *
 * Unlike {@link from}, it does not do any flattening and emits each argument in whole
 * as a separate `next` notification.
 *
 * ## Examples
 *
 * Emit the values `10, 20, 30`
 *
 * ```ts
 * import { of } from 'rxjs';
 *
 * of(10, 20, 30)
 *   .subscribe({
 *     next: value => console.log('next:', value),
 *     error: err => console.log('error:', err),
 *     complete: () => console.log('the end'),
 *   });
 *
 * // Outputs
 * // next: 10
 * // next: 20
 * // next: 30
 * // the end
 * ```
 *
 * Emit the array `[1, 2, 3]`
 *
 * ```ts
 * import { of } from 'rxjs';
 *
 * of([1, 2, 3])
 *   .subscribe({
 *     next: value => console.log('next:', value),
 *     error: err => console.log('error:', err),
 *     complete: () => console.log('the end'),
 *   });
 *
 * // Outputs
 * // next: [1, 2, 3]
 * // the end
 * ```
 *
 * @see {@link from}
 * @see {@link range}
 *
 * @param {...T} values A comma separated list of arguments you want to be emitted
 * @return {Observable} An Observable that emits the arguments
 * described above and then completes.
 */
export function of(...args) {
    const scheduler = popScheduler(args);
    return from(args, scheduler);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL29mLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQXFCOUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNERztBQUNILE1BQU0sVUFBVSxFQUFFLENBQUksR0FBRyxJQUE4QjtJQUNyRCxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsT0FBTyxJQUFJLENBQUMsSUFBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3RDLENBQUMiLCJmaWxlIjoibm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL29ic2VydmFibGUvb2YuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2hlZHVsZXJMaWtlLCBWYWx1ZUZyb21BcnJheSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcblxuLy8gRGV2cyBhcmUgbW9yZSBsaWtlbHkgdG8gcGFzcyBudWxsIG9yIHVuZGVmaW5lZCB0aGFuIHRoZXkgYXJlIGEgc2NoZWR1bGVyXG4vLyB3aXRob3V0IGFjY29tcGFueWluZyB2YWx1ZXMuIFRvIG1ha2UgdGhpbmdzIGVhc2llciBmb3IgKG5hdWdodHkpIGRldnMgd2hvXG4vLyB1c2UgdGhlIGBzdHJpY3ROdWxsQ2hlY2tzOiBmYWxzZWAgVHlwZVNjcmlwdCBjb21waWxlciBvcHRpb24sIHRoZXNlXG4vLyBvdmVybG9hZHMgd2l0aCBleHBsaWNpdCBudWxsIGFuZCB1bmRlZmluZWQgdmFsdWVzIGFyZSBpbmNsdWRlZC5cblxuZXhwb3J0IGZ1bmN0aW9uIG9mKHZhbHVlOiBudWxsKTogT2JzZXJ2YWJsZTxudWxsPjtcbmV4cG9ydCBmdW5jdGlvbiBvZih2YWx1ZTogdW5kZWZpbmVkKTogT2JzZXJ2YWJsZTx1bmRlZmluZWQ+O1xuXG4vKiogQGRlcHJlY2F0ZWQgVGhlIGBzY2hlZHVsZXJgIHBhcmFtZXRlciB3aWxsIGJlIHJlbW92ZWQgaW4gdjguIFVzZSBgc2NoZWR1bGVkYC4gRGV0YWlsczogaHR0cHM6Ly9yeGpzLmRldi9kZXByZWNhdGlvbnMvc2NoZWR1bGVyLWFyZ3VtZW50ICovXG5leHBvcnQgZnVuY3Rpb24gb2Yoc2NoZWR1bGVyOiBTY2hlZHVsZXJMaWtlKTogT2JzZXJ2YWJsZTxuZXZlcj47XG4vKiogQGRlcHJlY2F0ZWQgVGhlIGBzY2hlZHVsZXJgIHBhcmFtZXRlciB3aWxsIGJlIHJlbW92ZWQgaW4gdjguIFVzZSBgc2NoZWR1bGVkYC4gRGV0YWlsczogaHR0cHM6Ly9yeGpzLmRldi9kZXByZWNhdGlvbnMvc2NoZWR1bGVyLWFyZ3VtZW50ICovXG5leHBvcnQgZnVuY3Rpb24gb2Y8QSBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXT4oLi4udmFsdWVzQW5kU2NoZWR1bGVyOiBbLi4uQSwgU2NoZWR1bGVyTGlrZV0pOiBPYnNlcnZhYmxlPFZhbHVlRnJvbUFycmF5PEE+PjtcblxuZXhwb3J0IGZ1bmN0aW9uIG9mKCk6IE9ic2VydmFibGU8bmV2ZXI+O1xuLyoqIEBkZXByZWNhdGVkIERvIG5vdCBzcGVjaWZ5IGV4cGxpY2l0IHR5cGUgcGFyYW1ldGVycy4gU2lnbmF0dXJlcyB3aXRoIHR5cGUgcGFyYW1ldGVycyB0aGF0IGNhbm5vdCBiZSBpbmZlcnJlZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjguICovXG5leHBvcnQgZnVuY3Rpb24gb2Y8VD4oKTogT2JzZXJ2YWJsZTxUPjtcbmV4cG9ydCBmdW5jdGlvbiBvZjxUPih2YWx1ZTogVCk6IE9ic2VydmFibGU8VD47XG5leHBvcnQgZnVuY3Rpb24gb2Y8QSBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXT4oLi4udmFsdWVzOiBBKTogT2JzZXJ2YWJsZTxWYWx1ZUZyb21BcnJheTxBPj47XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGFyZ3VtZW50cyB0byBhbiBvYnNlcnZhYmxlIHNlcXVlbmNlLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5FYWNoIGFyZ3VtZW50IGJlY29tZXMgYSBgbmV4dGAgbm90aWZpY2F0aW9uLjwvc3Bhbj5cbiAqXG4gKiAhW10ob2YucG5nKVxuICpcbiAqIFVubGlrZSB7QGxpbmsgZnJvbX0sIGl0IGRvZXMgbm90IGRvIGFueSBmbGF0dGVuaW5nIGFuZCBlbWl0cyBlYWNoIGFyZ3VtZW50IGluIHdob2xlXG4gKiBhcyBhIHNlcGFyYXRlIGBuZXh0YCBub3RpZmljYXRpb24uXG4gKlxuICogIyMgRXhhbXBsZXNcbiAqXG4gKiBFbWl0IHRoZSB2YWx1ZXMgYDEwLCAyMCwgMzBgXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XG4gKlxuICogb2YoMTAsIDIwLCAzMClcbiAqICAgLnN1YnNjcmliZSh7XG4gKiAgICAgbmV4dDogdmFsdWUgPT4gY29uc29sZS5sb2coJ25leHQ6JywgdmFsdWUpLFxuICogICAgIGVycm9yOiBlcnIgPT4gY29uc29sZS5sb2coJ2Vycm9yOicsIGVyciksXG4gKiAgICAgY29tcGxldGU6ICgpID0+IGNvbnNvbGUubG9nKCd0aGUgZW5kJyksXG4gKiAgIH0pO1xuICpcbiAqIC8vIE91dHB1dHNcbiAqIC8vIG5leHQ6IDEwXG4gKiAvLyBuZXh0OiAyMFxuICogLy8gbmV4dDogMzBcbiAqIC8vIHRoZSBlbmRcbiAqIGBgYFxuICpcbiAqIEVtaXQgdGhlIGFycmF5IGBbMSwgMiwgM11gXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XG4gKlxuICogb2YoWzEsIDIsIDNdKVxuICogICAuc3Vic2NyaWJlKHtcbiAqICAgICBuZXh0OiB2YWx1ZSA9PiBjb25zb2xlLmxvZygnbmV4dDonLCB2YWx1ZSksXG4gKiAgICAgZXJyb3I6IGVyciA9PiBjb25zb2xlLmxvZygnZXJyb3I6JywgZXJyKSxcbiAqICAgICBjb21wbGV0ZTogKCkgPT4gY29uc29sZS5sb2coJ3RoZSBlbmQnKSxcbiAqICAgfSk7XG4gKlxuICogLy8gT3V0cHV0c1xuICogLy8gbmV4dDogWzEsIDIsIDNdXG4gKiAvLyB0aGUgZW5kXG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBmcm9tfVxuICogQHNlZSB7QGxpbmsgcmFuZ2V9XG4gKlxuICogQHBhcmFtIHsuLi5UfSB2YWx1ZXMgQSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBhcmd1bWVudHMgeW91IHdhbnQgdG8gYmUgZW1pdHRlZFxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSBhcmd1bWVudHNcbiAqIGRlc2NyaWJlZCBhYm92ZSBhbmQgdGhlbiBjb21wbGV0ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvZjxUPiguLi5hcmdzOiBBcnJheTxUIHwgU2NoZWR1bGVyTGlrZT4pOiBPYnNlcnZhYmxlPFQ+IHtcbiAgY29uc3Qgc2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyKGFyZ3MpO1xuICByZXR1cm4gZnJvbShhcmdzIGFzIFRbXSwgc2NoZWR1bGVyKTtcbn1cbiJdfQ==
