import { Observable } from '../Observable.mjs';
import { isFunction } from '../util/isFunction.mjs';
export function throwError(errorOrErrorFactory, scheduler) {
    const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;
    const init = (subscriber) => subscriber.error(errorFactory());
    return new Observable(scheduler ? (subscriber) => scheduler.schedule(init, 0, subscriber) : init);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL3Rocm93RXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFxSGhELE1BQU0sVUFBVSxVQUFVLENBQUMsbUJBQXdCLEVBQUUsU0FBeUI7SUFDNUUsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztJQUN2RyxNQUFNLElBQUksR0FBRyxDQUFDLFVBQTZCLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUNqRixPQUFPLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBVyxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0csQ0FBQyIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb2JzZXJ2YWJsZS90aHJvd0Vycm9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgU2NoZWR1bGVyTGlrZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JzZXJ2YWJsZSB0aGF0IHdpbGwgY3JlYXRlIGFuIGVycm9yIGluc3RhbmNlIGFuZCBwdXNoIGl0IHRvIHRoZSBjb25zdW1lciBhcyBhbiBlcnJvclxuICogaW1tZWRpYXRlbHkgdXBvbiBzdWJzY3JpcHRpb24uXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkp1c3QgZXJyb3JzIGFuZCBkb2VzIG5vdGhpbmcgZWxzZTwvc3Bhbj5cbiAqXG4gKiAhW10odGhyb3cucG5nKVxuICpcbiAqIFRoaXMgY3JlYXRpb24gZnVuY3Rpb24gaXMgdXNlZnVsIGZvciBjcmVhdGluZyBhbiBvYnNlcnZhYmxlIHRoYXQgd2lsbCBjcmVhdGUgYW4gZXJyb3IgYW5kIGVycm9yIGV2ZXJ5XG4gKiB0aW1lIGl0IGlzIHN1YnNjcmliZWQgdG8uIEdlbmVyYWxseSwgaW5zaWRlIG9mIG1vc3Qgb3BlcmF0b3JzIHdoZW4geW91IG1pZ2h0IHdhbnQgdG8gcmV0dXJuIGFuIGVycm9yZWRcbiAqIG9ic2VydmFibGUsIHRoaXMgaXMgdW5uZWNlc3NhcnkuIEluIG1vc3QgY2FzZXMsIHN1Y2ggYXMgaW4gdGhlIGlubmVyIHJldHVybiBvZiB7QGxpbmsgY29uY2F0TWFwfSxcbiAqIHtAbGluayBtZXJnZU1hcH0sIHtAbGluayBkZWZlcn0sIGFuZCBtYW55IG90aGVycywgeW91IGNhbiBzaW1wbHkgdGhyb3cgdGhlIGVycm9yLCBhbmQgUnhKUyB3aWxsIHBpY2tcbiAqIHRoYXQgdXAgYW5kIG5vdGlmeSB0aGUgY29uc3VtZXIgb2YgdGhlIGVycm9yLlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBDcmVhdGUgYSBzaW1wbGUgb2JzZXJ2YWJsZSB0aGF0IHdpbGwgY3JlYXRlIGEgbmV3IGVycm9yIHdpdGggYSB0aW1lc3RhbXAgYW5kIGxvZyBpdFxuICogYW5kIHRoZSBtZXNzYWdlIGV2ZXJ5IHRpbWUgeW91IHN1YnNjcmliZSB0byBpdFxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG4gKlxuICogbGV0IGVycm9yQ291bnQgPSAwO1xuICpcbiAqIGNvbnN0IGVycm9yV2l0aFRpbWVzdGFtcCQgPSB0aHJvd0Vycm9yKCgpID0+IHtcbiAqICAgY29uc3QgZXJyb3I6IGFueSA9IG5ldyBFcnJvcihgVGhpcyBpcyBlcnJvciBudW1iZXIgJHsgKytlcnJvckNvdW50IH1gKTtcbiAqICAgZXJyb3IudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAqICAgcmV0dXJuIGVycm9yO1xuICogfSk7XG4gKlxuICogZXJyb3JXaXRoVGltZXN0YW1wJC5zdWJzY3JpYmUoe1xuICogICBlcnJvcjogZXJyID0+IGNvbnNvbGUubG9nKGVyci50aW1lc3RhbXAsIGVyci5tZXNzYWdlKVxuICogfSk7XG4gKlxuICogZXJyb3JXaXRoVGltZXN0YW1wJC5zdWJzY3JpYmUoe1xuICogICBlcnJvcjogZXJyID0+IGNvbnNvbGUubG9nKGVyci50aW1lc3RhbXAsIGVyci5tZXNzYWdlKVxuICogfSk7XG4gKlxuICogLy8gTG9ncyB0aGUgdGltZXN0YW1wIGFuZCBhIG5ldyBlcnJvciBtZXNzYWdlIGZvciBlYWNoIHN1YnNjcmlwdGlvblxuICogYGBgXG4gKlxuICogIyMjIFVubmVjZXNzYXJ5IHVzYWdlXG4gKlxuICogVXNpbmcgYHRocm93RXJyb3JgIGluc2lkZSBvZiBhbiBvcGVyYXRvciBvciBjcmVhdGlvbiBmdW5jdGlvblxuICogd2l0aCBhIGNhbGxiYWNrLCBpcyB1c3VhbGx5IG5vdCBuZWNlc3NhcnlcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgb2YsIGNvbmNhdE1hcCwgdGltZXIsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbiAqXG4gKiBjb25zdCBkZWxheXMkID0gb2YoMTAwMCwgMjAwMCwgSW5maW5pdHksIDMwMDApO1xuICpcbiAqIGRlbGF5cyQucGlwZShcbiAqICAgY29uY2F0TWFwKG1zID0+IHtcbiAqICAgICBpZiAobXMgPCAxMDAwMCkge1xuICogICAgICAgcmV0dXJuIHRpbWVyKG1zKTtcbiAqICAgICB9IGVsc2Uge1xuICogICAgICAgLy8gVGhpcyBpcyBwcm9iYWJseSBvdmVya2lsbC5cbiAqICAgICAgIHJldHVybiB0aHJvd0Vycm9yKCgpID0+IG5ldyBFcnJvcihgSW52YWxpZCB0aW1lICR7IG1zIH1gKSk7XG4gKiAgICAgfVxuICogICB9KVxuICogKVxuICogLnN1YnNjcmliZSh7XG4gKiAgIG5leHQ6IGNvbnNvbGUubG9nLFxuICogICBlcnJvcjogY29uc29sZS5lcnJvclxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBZb3UgY2FuIGp1c3QgdGhyb3cgdGhlIGVycm9yIGluc3RlYWRcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgb2YsIGNvbmNhdE1hcCwgdGltZXIgfSBmcm9tICdyeGpzJztcbiAqXG4gKiBjb25zdCBkZWxheXMkID0gb2YoMTAwMCwgMjAwMCwgSW5maW5pdHksIDMwMDApO1xuICpcbiAqIGRlbGF5cyQucGlwZShcbiAqICAgY29uY2F0TWFwKG1zID0+IHtcbiAqICAgICBpZiAobXMgPCAxMDAwMCkge1xuICogICAgICAgcmV0dXJuIHRpbWVyKG1zKTtcbiAqICAgICB9IGVsc2Uge1xuICogICAgICAgLy8gQ2xlYW5lciBhbmQgZWFzaWVyIHRvIHJlYWQgZm9yIG1vc3QgZm9sa3MuXG4gKiAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdGltZSAkeyBtcyB9YCk7XG4gKiAgICAgfVxuICogICB9KVxuICogKVxuICogLnN1YnNjcmliZSh7XG4gKiAgIG5leHQ6IGNvbnNvbGUubG9nLFxuICogICBlcnJvcjogY29uc29sZS5lcnJvclxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZXJyb3JGYWN0b3J5IEEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHdpbGwgY3JlYXRlIHRoZSBlcnJvciBpbnN0YW5jZSB0aGF0IGlzIHB1c2hlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm93RXJyb3IoZXJyb3JGYWN0b3J5OiAoKSA9PiBhbnkpOiBPYnNlcnZhYmxlPG5ldmVyPjtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCB3aWxsIGVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBlcnJvciBpbW1lZGlhdGVseSB1cG9uIHN1YnNjcmlwdGlvbi5cbiAqXG4gKiBAcGFyYW0gZXJyb3IgVGhlIGVycm9yIGluc3RhbmNlIHRvIGVtaXRcbiAqIEBkZXByZWNhdGVkIFN1cHBvcnQgZm9yIHBhc3NpbmcgYW4gZXJyb3IgdmFsdWUgd2lsbCBiZSByZW1vdmVkIGluIHY4LiBJbnN0ZWFkLCBwYXNzIGEgZmFjdG9yeSBmdW5jdGlvbiB0byBgdGhyb3dFcnJvcigoKSA9PiBuZXcgRXJyb3IoJ3Rlc3QnKSlgLiBUaGlzIGlzXG4gKiBiZWNhdXNlIGl0IHdpbGwgY3JlYXRlIHRoZSBlcnJvciBhdCB0aGUgbW9tZW50IGl0IHNob3VsZCBiZSBjcmVhdGVkIGFuZCBjYXB0dXJlIGEgbW9yZSBhcHByb3ByaWF0ZSBzdGFjayB0cmFjZS4gSWZcbiAqIGZvciBzb21lIHJlYXNvbiB5b3UgbmVlZCB0byBjcmVhdGUgdGhlIGVycm9yIGFoZWFkIG9mIHRpbWUsIHlvdSBjYW4gc3RpbGwgZG8gdGhhdDogYGNvbnN0IGVyciA9IG5ldyBFcnJvcigndGVzdCcpOyB0aHJvd0Vycm9yKCgpID0+IGVycik7YC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm93RXJyb3IoZXJyb3I6IGFueSk6IE9ic2VydmFibGU8bmV2ZXI+O1xuXG4vKipcbiAqIE5vdGlmaWVzIHRoZSBjb25zdW1lciBvZiBhbiBlcnJvciB1c2luZyBhIGdpdmVuIHNjaGVkdWxlciBieSBzY2hlZHVsaW5nIGl0IGF0IGRlbGF5IGAwYCB1cG9uIHN1YnNjcmlwdGlvbi5cbiAqXG4gKiBAcGFyYW0gZXJyb3JPckVycm9yRmFjdG9yeSBBbiBlcnJvciBpbnN0YW5jZSBvciBlcnJvciBmYWN0b3J5XG4gKiBAcGFyYW0gc2NoZWR1bGVyIEEgc2NoZWR1bGVyIHRvIHVzZSB0byBzY2hlZHVsZSB0aGUgZXJyb3Igbm90aWZpY2F0aW9uXG4gKiBAZGVwcmVjYXRlZCBUaGUgYHNjaGVkdWxlcmAgcGFyYW1ldGVyIHdpbGwgYmUgcmVtb3ZlZCBpbiB2OC5cbiAqIFVzZSBgdGhyb3dFcnJvcmAgaW4gY29tYmluYXRpb24gd2l0aCB7QGxpbmsgb2JzZXJ2ZU9ufTogYHRocm93RXJyb3IoKCkgPT4gbmV3IEVycm9yKCd0ZXN0JykpLnBpcGUob2JzZXJ2ZU9uKHNjaGVkdWxlcikpO2AuXG4gKiBEZXRhaWxzOiBodHRwczovL3J4anMuZGV2L2RlcHJlY2F0aW9ucy9zY2hlZHVsZXItYXJndW1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm93RXJyb3IoZXJyb3JPckVycm9yRmFjdG9yeTogYW55LCBzY2hlZHVsZXI6IFNjaGVkdWxlckxpa2UpOiBPYnNlcnZhYmxlPG5ldmVyPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHRocm93RXJyb3IoZXJyb3JPckVycm9yRmFjdG9yeTogYW55LCBzY2hlZHVsZXI/OiBTY2hlZHVsZXJMaWtlKTogT2JzZXJ2YWJsZTxuZXZlcj4ge1xuICBjb25zdCBlcnJvckZhY3RvcnkgPSBpc0Z1bmN0aW9uKGVycm9yT3JFcnJvckZhY3RvcnkpID8gZXJyb3JPckVycm9yRmFjdG9yeSA6ICgpID0+IGVycm9yT3JFcnJvckZhY3Rvcnk7XG4gIGNvbnN0IGluaXQgPSAoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxuZXZlcj4pID0+IHN1YnNjcmliZXIuZXJyb3IoZXJyb3JGYWN0b3J5KCkpO1xuICByZXR1cm4gbmV3IE9ic2VydmFibGUoc2NoZWR1bGVyID8gKHN1YnNjcmliZXIpID0+IHNjaGVkdWxlci5zY2hlZHVsZShpbml0IGFzIGFueSwgMCwgc3Vic2NyaWJlcikgOiBpbml0KTtcbn1cbiJdfQ==
