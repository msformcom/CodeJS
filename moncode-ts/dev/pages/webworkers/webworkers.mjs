"use strict";
function addition(a, b) {
    let r = 0;
    for (let i = 0; i < a; i++) {
        r++;
    }
    for (let i = 0; i < b; i++) {
        r++;
    }
    return r;
}
// function additionAsync(a:number, b:number){
//     return new Promise((resolve,reject)=>{
//         var r=addition(a,b);
//         resolve(r);
//     })
// }
// (async function(){
//     console.log("Debut");
//     // fetch est un code natif => execution en parrallele
//     //fetch("http://www.google.fr");
//     // code js => execution en série 
//     additionAsync(10000000,10000000).then((r)=>{
//         console.log("fin : "+r);
//     });
//     // au bout de longtemps ce code sera exécuté
//     console.log("Suite : ");
// })();
// Création du worker
function additionAsync(a, b) {
    return new Promise((resolve, reject) => {
        console.log("Debut");
        let ww = new Worker("./addition-worker.mjs");
        // j'envois les donner à traiter (pas de références)
        ww.postMessage({ a: 10000000, b: 10000000 });
        ww.addEventListener("error", () => {
            reject(new Error("Pas possible"));
        });
        ww.addEventListener("message", (e) => {
            let o = e.data;
            console.log(o);
            if (o.result) {
                resolve(o.result);
            }
        });
        console.log("Ca continue");
    });
}
// Chaque addition prend 5s;
(async function () {
    let c1 = additionAsync(10000000, 10000000);
    // est-ce que l'addition est en cours de calcul ? oui
    let c2 = additionAsync(20000000, 30000000);
    // est-ce que l'addition est en cours de calcul ? oui
    // 1ms
    var r = await Promise.all([c1, c2]);
    // 5s 
    var rFinal = await additionAsync(...r);
    //
})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VzL3dlYndvcmtlcnMvd2Vid29ya2Vycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsU0FBUyxRQUFRLENBQUMsQ0FBUSxFQUFDLENBQVE7SUFDL0IsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDO0lBQ1IsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDO1FBQ2pCLENBQUMsRUFBRSxDQUFDO0lBQ1IsQ0FBQztJQUNELEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQztRQUNqQixDQUFDLEVBQUUsQ0FBQztJQUNSLENBQUM7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNiLENBQUM7QUFFRCw4Q0FBOEM7QUFDOUMsNkNBQTZDO0FBQzdDLCtCQUErQjtBQUMvQixzQkFBc0I7QUFDdEIsU0FBUztBQUNULElBQUk7QUFFSixxQkFBcUI7QUFDckIsNEJBQTRCO0FBQzVCLDREQUE0RDtBQUM1RCx1Q0FBdUM7QUFFdkMsd0NBQXdDO0FBQ3hDLG1EQUFtRDtBQUNuRCxtQ0FBbUM7QUFDbkMsVUFBVTtBQUVWLG1EQUFtRDtBQUNuRCwrQkFBK0I7QUFDL0IsUUFBUTtBQUVSLHFCQUFxQjtBQUNyQixTQUFTLGFBQWEsQ0FBQyxDQUFRLEVBQUMsQ0FBUTtJQUNwQyxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFDLE1BQU0sRUFBQyxFQUFFO1FBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckIsSUFBSSxFQUFFLEdBQUMsSUFBSSxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUMzQyxvREFBb0Q7UUFDcEQsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFDLENBQUMsRUFBQyxRQUFRLEVBQUMsQ0FBQyxFQUFDLFFBQVEsRUFBQyxDQUFDLENBQUE7UUFDdkMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBQyxHQUFFLEVBQUU7WUFDNUIsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQztnQkFDVCxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RCLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBRUQsNEJBQTRCO0FBQzVCLENBQUMsS0FBSztJQUNGLElBQUksRUFBRSxHQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMscURBQXFEO0lBQ3pELElBQUksRUFBRSxHQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEMscURBQXFEO0lBQ3ZELE1BQU07SUFDSixJQUFJLENBQUMsR0FBQyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqQyxNQUFNO0lBQ1IsSUFBSSxNQUFNLEdBQUMsTUFBTSxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyQyxFQUFFO0FBQ04sQ0FBQyxDQUFDLEVBQUUsQ0FBQyIsImZpbGUiOiJwYWdlcy93ZWJ3b3JrZXJzL3dlYndvcmtlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBhZGRpdGlvbihhOm51bWJlcixiOm51bWJlcil7XHJcbiAgICBsZXQgcj0wO1xyXG4gICAgZm9yKGxldCBpPTA7aTxhO2krKyl7XHJcbiAgICAgICAgcisrO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBpPTA7aTxiO2krKyl7XHJcbiAgICAgICAgcisrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbi8vIGZ1bmN0aW9uIGFkZGl0aW9uQXN5bmMoYTpudW1iZXIsIGI6bnVtYmVyKXtcclxuLy8gICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSxyZWplY3QpPT57XHJcbi8vICAgICAgICAgdmFyIHI9YWRkaXRpb24oYSxiKTtcclxuLy8gICAgICAgICByZXNvbHZlKHIpO1xyXG4vLyAgICAgfSlcclxuLy8gfVxyXG5cclxuLy8gKGFzeW5jIGZ1bmN0aW9uKCl7XHJcbi8vICAgICBjb25zb2xlLmxvZyhcIkRlYnV0XCIpO1xyXG4vLyAgICAgLy8gZmV0Y2ggZXN0IHVuIGNvZGUgbmF0aWYgPT4gZXhlY3V0aW9uIGVuIHBhcnJhbGxlbGVcclxuLy8gICAgIC8vZmV0Y2goXCJodHRwOi8vd3d3Lmdvb2dsZS5mclwiKTtcclxuXHJcbi8vICAgICAvLyBjb2RlIGpzID0+IGV4ZWN1dGlvbiBlbiBzw6lyaWUgXHJcbi8vICAgICBhZGRpdGlvbkFzeW5jKDEwMDAwMDAwLDEwMDAwMDAwKS50aGVuKChyKT0+e1xyXG4vLyAgICAgICAgIGNvbnNvbGUubG9nKFwiZmluIDogXCIrcik7XHJcbi8vICAgICB9KTtcclxuXHJcbi8vICAgICAvLyBhdSBib3V0IGRlIGxvbmd0ZW1wcyBjZSBjb2RlIHNlcmEgZXjDqWN1dMOpXHJcbi8vICAgICBjb25zb2xlLmxvZyhcIlN1aXRlIDogXCIpO1xyXG4vLyB9KSgpO1xyXG5cclxuLy8gQ3LDqWF0aW9uIGR1IHdvcmtlclxyXG5mdW5jdGlvbiBhZGRpdGlvbkFzeW5jKGE6bnVtYmVyLGI6bnVtYmVyKTpQcm9taXNlPG51bWJlcj57XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiRGVidXRcIik7XHJcbiAgICAgICAgbGV0IHd3PW5ldyBXb3JrZXIoXCIuL2FkZGl0aW9uLXdvcmtlci5tanNcIik7XHJcbiAgICAgICAgLy8gaidlbnZvaXMgbGVzIGRvbm5lciDDoCB0cmFpdGVyIChwYXMgZGUgcsOpZsOpcmVuY2VzKVxyXG4gICAgICAgIHd3LnBvc3RNZXNzYWdlKHthOjEwMDAwMDAwLGI6MTAwMDAwMDB9KVxyXG4gICAgICAgIHd3LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCgpPT57XHJcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJQYXMgcG9zc2libGVcIikpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHd3LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsKGUpPT57XHJcbiAgICAgICAgICAgIGxldCBvPWUuZGF0YTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cobyk7XHJcbiAgICAgICAgICAgIGlmKG8ucmVzdWx0KXtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoby5yZXN1bHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJDYSBjb250aW51ZVwiKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyBDaGFxdWUgYWRkaXRpb24gcHJlbmQgNXM7XHJcbihhc3luYyBmdW5jdGlvbigpe1xyXG4gICAgbGV0IGMxPWFkZGl0aW9uQXN5bmMoMTAwMDAwMDAsMTAwMDAwMDApO1xyXG4gICAgICAgIC8vIGVzdC1jZSBxdWUgbCdhZGRpdGlvbiBlc3QgZW4gY291cnMgZGUgY2FsY3VsID8gb3VpXHJcbiAgICBsZXQgYzI9YWRkaXRpb25Bc3luYygyMDAwMDAwMCwzMDAwMDAwMCk7XHJcbiAgICAgIC8vIGVzdC1jZSBxdWUgbCdhZGRpdGlvbiBlc3QgZW4gY291cnMgZGUgY2FsY3VsID8gb3VpXHJcbiAgICAvLyAxbXNcclxuICAgICAgdmFyIHI9YXdhaXQgUHJvbWlzZS5hbGwoW2MxLGMyXSk7XHJcbiAgICAgIC8vIDVzIFxyXG4gICAgdmFyIHJGaW5hbD1hd2FpdCBhZGRpdGlvbkFzeW5jKC4uLnIpO1xyXG4gICAgLy9cclxufSkoKTtcclxuXHJcblxyXG4iXX0=
